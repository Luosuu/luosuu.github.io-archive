<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 洛舒luosuu的小站</title>
    <link>https://luosuu.github.io/post/</link>
    <description>Recent content in Posts on 洛舒luosuu的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2020</copyright>
    <lastBuildDate>Sat, 08 Aug 2020 14:34:53 +0800</lastBuildDate>
    
	<atom:link href="https://luosuu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>STsheet</title>
      <link>https://luosuu.github.io/post/stsheet/</link>
      <pubDate>Sat, 08 Aug 2020 14:34:53 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/stsheet/</guid>
      <description>&lt;p&gt;《浅谈ST表》完整请参考：https://www.luogu.com.cn/blog/zhouziheng666/qian-tan-st-biao&lt;/p&gt;
&lt;p&gt;核心要素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查询操作可以重叠，如max操作&lt;code&gt;max(a,b,c)=max(max(a,b),max(b,c))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;采用倍增的方法构建，如果用$f(i,j)$代表从第i个数开始，共$2^j$个数的最大值，那么就有：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$
f(i,j)=max(f(i,j-1),f(i+2^{j-1},j-1))
$$&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;自然，$f(i,0)=a[i]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于查询的时候，查询的长度可能是小于等于N的任何一个整数，设该查询的长度是&lt;code&gt;len&lt;/code&gt;，查询的数组的第一个数是整个数组的第&lt;code&gt;r&lt;/code&gt;个数。我们可以用$max[r,r+len]$来代表被查询的数组的最大值，以上面的函数的定义，可以用
$$
f(r,log_{2}(len))
$$
来表示。在输入数组总长度N后，我们需要对1到N的所有数求对数，提前存储好所有可能要用的&lt;code&gt;log(len)&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于某个从第&lt;code&gt;r&lt;/code&gt;个数开始的被查询的长度为&lt;code&gt;len&lt;/code&gt;数组，$f(r,log_{2}(len))$的实际来源为&lt;/p&gt;
&lt;p&gt;$$f(r,1)=max(f(r,1-1),f(r+2^{1-1},1-1))$$
$$f(r,2)=max(f(r,2-1),f(r+2^{2-1},2-1)) $$
$$f(r,3)=max(f(r,3-1),f(r+2^{3-1},3-1)) $$
$$&amp;hellip;$$
$$f(,log_{2}len)=max(f(r,log_{2}len-1),f(r+2^{log_{2}len-1},log_{2}len-1))$$&lt;/p&gt;
&lt;p&gt;在获取数组长度和数组内容后，实际上是用所有的$f(i,0)$获得了所有的$f(i,1)$，然后再用$f(i,1)$得到所有的$f(i,2)$（这个过程要保证$i+2^j$不超过N，否则会越界），一直到获得$f(0,log_{2}N)$。这样查询时，对于任意一个$f(r,log_{2}len)$都能立刻查询到，查询的复杂度为$O(1)$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果查询的数组长&lt;code&gt;len&lt;/code&gt;，$[log_{2}len]$代表&lt;code&gt;len&lt;/code&gt;对2取对数的向下取整，那么一次这种函数的构建最多能包含$2^{[log_{2}len]}$个数，如果&lt;code&gt;len&lt;/code&gt;不是2的倍数，那么就会有数不会被包括进去，所以实际上为了求该数组的最大值，是从左端和右边分别构建一个函数（$2^{[log_{2}len]}$肯定大于$len/2$），取这两个函数的最大值:
$$
max[r,r+len]=max(f(r,log(len)), f(r-log(len)+1,log(len)))
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于任何可以重叠的查询操作，都可以使用ST表这种方法，无非是从$f(i,0)$开始向上构建时采用的方法不同。但构建逻辑和数据结构是一样的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>2020shanghai B - 缓冲区结算、括号嵌套的递归</title>
      <link>https://luosuu.github.io/post/2020shanghai-b/</link>
      <pubDate>Thu, 06 Aug 2020 11:13:49 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/2020shanghai-b/</guid>
      <description>&lt;p&gt;题面:https://ac.nowcoder.com/acm/contest/6871/B&lt;/p&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;典型的字符串处理，而且出题人强调了没有括号嵌套（真亚撒西嘤嘤嘤）。&lt;/p&gt;
&lt;p&gt;因为分子式不同部分的计算方式是不一样的，可以用缓冲的思想来解决这个问题。&lt;/p&gt;
&lt;p&gt;在不考虑括号嵌套的情况下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ll;
string a;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a;
    ll ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,cnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a.length();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a.length();)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;){
             &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;)cnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;
              &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;)cnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;)cnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;;
            i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;){
                res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
                i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;res)ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;cnt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;cnt&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;res;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;//遇到左括号，就先把未加进最终结果的非括号内元素们算入结果，清空缓冲区，准备计算括号内的分子式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len){
          sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;ans;
            ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#75715e&#34;&gt;//遇到右括号，结算括号内部的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len){
            i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
             &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;){
                res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
                i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;res)sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;ans;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;ans&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;res;
            ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
    }
    sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;ans;
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;,sum);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;用递归的方式处理括号嵌套&#34;&gt;用递归的方式处理括号嵌套&lt;/h3&gt;
&lt;p&gt;如果要考虑括号内部的嵌套，就需要用到递归的方法了。&lt;/p&gt;
&lt;p&gt;先说缓冲区的部分，遇到常规字符&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;H&lt;/code&gt;,&lt;code&gt;O&lt;/code&gt;，将缓冲区算入结果，将常规字符的值读入缓冲区，以处理后面可能会出现的数字，括号等情况。&lt;/p&gt;
&lt;p&gt;遇到左括号，也是先将缓冲区算入结果，然后进入下一层函数，计算括号内部的分子式，遇到右括号时内部分子式返回来。如果内部还有括号，同理，会进入再下一层函数。最后将括号内的值读入缓冲区。&lt;/p&gt;
&lt;p&gt;遇到数字，就会继续往下读，直到把整个数字段都读出来（这个过程会转换为具体的数字&lt;code&gt;times&lt;/code&gt;）。然后将缓冲区内的值乘以times算入结果，清空缓冲区（这里清空缓冲区是必要的，虽然读入下一个数据的时候会覆盖它，但是如果已经是最后一个数据，就会跳出循环，执行最后的缓冲区内数据算入结果，如果不清空会多算一次）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; in[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000050&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len;
ll &lt;span style=&#34;color:#a6e22e&#34;&gt;cal&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;now){
    ll tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,times&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(now;now&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(in[now]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;in[now]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;){
            times&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(in[now]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);
            now&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(in[now]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;in[now]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;){
                times&lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
                times&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(in[now]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);
                now&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            }
            sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;times;
            tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#75715e&#34;&gt;//遇到左括号时，先将缓冲区内部加入结果，然后进入下一层函数，计算内部分子式，遇到右括号再返回来
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(in[now]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;){
            sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp;
            now&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cal(now);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(in[now]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;){
            sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp;
            now&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum;
        }
        &lt;span style=&#34;color:#75715e&#34;&gt;//遇到常规字符也是把上一个缓冲区的内容加入结果，把当前的加入缓冲区，以处理后面可能会出现的数字
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(in[now]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;){
            sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp;
            tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;
            now&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(in[now]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;){
            sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp;
            tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            now&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(in[now]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;){
            sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp;
            tmp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;;
            now&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }
    }
    sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;tmp;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; T){
    scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,in);
    len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;strlen(in);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; now&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;,cal(now));
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;//scanf(&amp;#34;%d&amp;#34;,&amp;amp;t);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;t;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        solve(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AtABC174 E-二分查找</title>
      <link>https://luosuu.github.io/post/atabc174-e/</link>
      <pubDate>Thu, 06 Aug 2020 10:04:10 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/atabc174-e/</guid>
      <description>&lt;p&gt;题面：https://atcoder.jp/contests/abc174/tasks/abc174_e&lt;/p&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;输入N个有长度&lt;code&gt;A[n]&lt;/code&gt;的原木，现在要一共对这些木头切至多K刀，求切K刀后所有木材最长的木材的最短值。即让切K刀后的所有木材的最长值尽量短。&lt;/p&gt;
&lt;p&gt;检验一个木材最长值&lt;code&gt;len&lt;/code&gt;是否符合切K刀的条件是简单的，只需要每个原木的长度除以&lt;code&gt;len&lt;/code&gt;向上取整再减一，然后取和，就能检验是否符合切K刀的条件。&lt;/p&gt;
&lt;p&gt;这类找出 “最长值的最短”“最小值的最大”一类，也就是&lt;code&gt;max(min(len))&lt;/code&gt;或&lt;code&gt;min(max(len))&lt;/code&gt;一般是使用二分查找方法的提示。&lt;/p&gt;
&lt;p&gt;在寻找最长木材的最小值的过程中，我们可以先用1做开头，原木中最长值&lt;code&gt;max_len&lt;/code&gt;做结尾，然后以这俩为首位进行二分查找。有三种情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当中值&lt;code&gt;mid&lt;/code&gt;的切割次数小于K次，说明&lt;code&gt;mid&lt;/code&gt;取的太长了，将&lt;code&gt;mid&lt;/code&gt;作为新的结尾；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果&lt;code&gt;mid&lt;/code&gt;的切割次数大于K次，说明取的太短了，应该把&lt;code&gt;mid&lt;/code&gt;作为新的开头；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当&lt;code&gt;mid&lt;/code&gt;的切割次数恰好等于K次，说明&lt;code&gt;mid&amp;gt;=最长木材的最小值&lt;/code&gt;，应该继续往下探，将&lt;code&gt;mid&lt;/code&gt;作为新的结尾。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cut_times&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logs, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; cut_len, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; log_num);

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N,K;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; K;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; logs[N];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; max_long &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;N;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; logs[i];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(logs[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; max_long) {
            max_long &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; logs[i];
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(K&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; max_long;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max_long;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; mid;

    &lt;span style=&#34;color:#75715e&#34;&gt;//binary search
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(start&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;end){
        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; end)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(cut_times(logs, mid, N)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;K){&lt;span style=&#34;color:#75715e&#34;&gt;//cut times equals to k, still need to try a smaller one
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(cut_times(logs, mid, N)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;K){
            start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }

    }

    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; start;

}

&lt;span style=&#34;color:#75715e&#34;&gt;// Given max cut length, get needed cut times
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cut_times&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logs, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; cut_len, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; log_num){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;  need_times &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;log_num;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logs&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;cut_len&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
            need_times &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cut_len&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            need_times &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cut_len;
        }
        logs&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; need_times;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Cf#661 A-输入输出</title>
      <link>https://luosuu.github.io/post/cf661-a/</link>
      <pubDate>Thu, 06 Aug 2020 08:41:45 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/cf661-a/</guid>
      <description>&lt;p&gt;题面：https://codeforces.com/contest/1399/problem/A&lt;/p&gt;
&lt;p&gt;存储每一例数据，排序，判断相邻的两个之间是否超过1即可。这里要注意的是输入输出的方式。&lt;/p&gt;
&lt;p&gt;以下注释掉的地方也都是可以采用的方式。&lt;/p&gt;
&lt;p&gt;其中一种方式是避免动态数组，使用用提前规定好的最大数组。（虽然这个题用动态数组也过了）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;algorithm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;iostream&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;//int a[1050];
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
  &lt;span style=&#34;color:#75715e&#34;&gt;//  scanf(&amp;#34;%d&amp;#34;,&amp;amp;n);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[n];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
  &lt;span style=&#34;color:#75715e&#34;&gt;//      scanf(&amp;#34;%d&amp;#34;,&amp;amp;a[i]);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
    }
    sort(a,a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;n);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
        &lt;span style=&#34;color:#75715e&#34;&gt;//    puts(&amp;#34;NO&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NO&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
        }
    }
   &lt;span style=&#34;color:#75715e&#34;&gt;// puts(&amp;#34;YES&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t;
   &lt;span style=&#34;color:#75715e&#34;&gt;// scanf(&amp;#34;%d&amp;#34;,&amp;amp;t);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; t; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        solve();
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;another&#34;&gt;another&lt;/h3&gt;
&lt;p&gt;还有一道题也是和输入输出相关的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大学的同学来自全国各地，对于远离家乡步入陌生大学校园的大一新生来说，碰到老乡是多么激动的一件事，于是大家都热衷于问身边的同学是否与自己同乡，来自新疆的小赛尤其热衷。但是大家都不告诉小赛他们来自哪里，只是说与谁是不是同乡，从所给的信息中，你能告诉小赛有多少人确定是她的同乡吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包含多组测试用例。&lt;/p&gt;
&lt;p&gt;对于每组测试用例：&lt;/p&gt;
&lt;p&gt;第一行包括2个整数，N（1 &amp;lt;= N &amp;lt;= 1000），M(0 &amp;lt;= M &amp;lt;= N*(N-1)/2)，代表现有N个人（用1~N编号）和M组关系；&lt;/p&gt;
&lt;p&gt;在接下来的M行里，每行包括3个整数，a，b, c，如果c为1，则代表a跟b是同乡；如果c为0，则代表a跟b不是同乡；&lt;/p&gt;
&lt;p&gt;已知1表示小赛本人。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入样例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3 1&lt;/p&gt;
&lt;p&gt;2 3 1&lt;/p&gt;
&lt;p&gt;5 4&lt;/p&gt;
&lt;p&gt;1 2 1&lt;/p&gt;
&lt;p&gt;3 4 0&lt;/p&gt;
&lt;p&gt;2 5 1&lt;/p&gt;
&lt;p&gt;3 2 1&lt;/p&gt;
&lt;p&gt;本题的输入部分可以这样写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 每组第一行是2个整数，N和M，至于为啥用while，因为是多组。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;N, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;M) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; EOF) {
      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, N, M);
      &lt;span style=&#34;color:#75715e&#34;&gt;// 循环读取“接下来的M行”
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b, c;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 每行是3个整数，a，b，c。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;c);
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a, b, c);
      }
      &lt;span style=&#34;color:#75715e&#34;&gt;// M行读取完了，就又要开始下一组了，去while那里。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;and-another-one&#34;&gt;and another one!&lt;/h3&gt;
&lt;p&gt;还有一道题是&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/6871/C&#34;&gt;2020上海高校程序设计竞赛的C题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;计算每一例聊天记录里，含&lt;code&gt;2&lt;/code&gt;的句子占的比例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; T;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; T;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; rate[T];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; num[T];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        num[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
        getchar();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            string in;
            getline(cin,in);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; in.size();
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;k&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len;k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(in[k]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;){
                    num[i]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
                }
            }
        }
        rate[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num[i]&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;);
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; rate[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;one-more-thing&#34;&gt;one more thing&lt;/h3&gt;
&lt;p&gt;转载一下&lt;a href=&#34;https://blog.csdn.net/m0_38059875/article/details/105205096&#34;&gt;CSDN上的OJ之C++输入输出总结&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;不知道输入几组&#34;&gt;不知道输入几组&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;计算a+b的和&lt;/p&gt;
&lt;p&gt;每行包含两个整数a和b&lt;/p&gt;
&lt;p&gt;对于每行输入对应输出一行a和b的和&lt;/p&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;p&gt;1 5&lt;/p&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,b;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b)&lt;span style=&#34;color:#75715e&#34;&gt;//注意while处理多个case
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;知道输入几组&#34;&gt;知道输入几组&lt;/h4&gt;
&lt;p&gt;先输入一个组数n，然后再循环读取n组数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; &lt;span style=&#34;color:#75715e&#34;&gt;// 数据的组数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n; &lt;span style=&#34;color:#75715e&#34;&gt;// 读取组数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b;
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b;
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;字符串的输入处理&#34;&gt;字符串的输入处理&lt;/h4&gt;
&lt;p&gt;因为OJ最终只比较文件，就不用保存所有输入，可以读一组数据计算一组数据。&lt;/p&gt;
&lt;p&gt;当读取字符串的时候需要注意，&lt;code&gt;cin&lt;/code&gt;不能读取空白字符，比如空格，如果遇到空格则会直接终止字符串。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	string s;
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s; &lt;span style=&#34;color:#75715e&#34;&gt;// 读到空白就结束当前的字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行的结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;abc &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
abc请按任意键继续. . .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要读取整行字符串，可以使用&lt;code&gt;getline()&lt;/code&gt;和&lt;code&gt;cin.getline()&lt;/code&gt;这两个函数，两个函数都是遇到定界符，则结束这行的字符串，定界符默认设置为&lt;strong&gt;回车&lt;/strong&gt;。两个函数略有不同的是，&lt;code&gt;getline()&lt;/code&gt;操作的对象是string，&lt;code&gt;cin.getline()&lt;/code&gt;操作的对象的char数组。详细的定义如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getline()&lt;/code&gt;，要使用这个函数需要包含头文件&amp;lt;string&amp;gt;，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;istream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; getline(istream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; is, string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; delim);
istream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; getline(istream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; is, string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; str);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;is：它是istream类的对象，告诉函数从何处读取输入流。&lt;/li&gt;
&lt;li&gt;str：这是一个string字符串对象，从流中读取输入后，将输入存储在此对象中。&lt;/li&gt;
&lt;li&gt;delim：这是定界字符，它告诉函数在达到该字符后停止读取进一步的输入。&lt;/li&gt;
&lt;li&gt;返回值：此函数返回值是与输入参数is相同的输入流。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	string s;
	getline(cin, s);
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s;	
	system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}		
&lt;span style=&#34;color:#ae81ff&#34;&gt;12345678910&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;abc &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
abc 123请按任意键继续. . .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;cin.getline()&lt;/code&gt;函数读取至新行结尾或直到达到最大限制的整行文本。函数定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// (buffer, stream_size, delimiter)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;istream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; getline(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// The delimiter character is considered as &amp;#39;\n&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;istream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; getline(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size)
&lt;span style=&#34;color:#ae81ff&#34;&gt;12345&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;提取字符直到定界符。&lt;/li&gt;
&lt;li&gt;将字符存储在缓冲区中。&lt;/li&gt;
&lt;li&gt;提取的最大字符数为&lt;code&gt;size-1&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() 
{ 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; str[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]; 
    cin.getline(str, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;); 
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; 
}
&lt;span style=&#34;color:#ae81ff&#34;&gt;123456789&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;no bug forever
no bug forever请按任意键继续. . .
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;输入为9个数字，每个数字用&lt;code&gt;逗号,&lt;/code&gt;分隔，将数字保存到一个一维数组中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1,2,3,4,5,6,7,8,9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;() {
	string str;
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; str; &lt;span style=&#34;color:#75715e&#34;&gt;// 获取整行数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; vec; &lt;span style=&#34;color:#75715e&#34;&gt;// 将数字保存在数组中
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ch : str) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isdigit(ch)) vec.push_back(ch &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 如果是数字才保存，并且需要减去字符0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; i : vec) {
		cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;;
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	test();
	system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;span style=&#34;color:#ae81ff&#34;&gt;123456789101112131415161718192021&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;1,2,3,4,5,6,7,8,9
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; 请按任意键继续. . .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AtABC174C-模运算</title>
      <link>https://luosuu.github.io/post/atabc174_c/</link>
      <pubDate>Tue, 04 Aug 2020 17:04:51 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/atabc174_c/</guid>
      <description>&lt;p&gt;题面：https://atcoder.jp/contests/abc174/tasks/abc174_c&lt;/p&gt;
&lt;p&gt;本题可以简单化简 $$ K \cdot a=7 \cdot \frac{1-10^n}{1-10} $$&lt;/p&gt;
&lt;p&gt;等同于 $$ K \cdot a \cdot 9=7 \cdot (10^n-1) $$&lt;/p&gt;
&lt;p&gt;a是K的倍数，n为被除数的位数，n即为所求。只要右侧式能够整除9K（a是个整数），那么就满足要求。&lt;/p&gt;
&lt;p&gt;于是调试n，用右侧式对左侧进行取模操作即可。&lt;/p&gt;
&lt;p&gt;但计算过程中有$10^n$的限制，可能会超过&lt;code&gt;long long &lt;/code&gt;数据的最大值。&lt;/p&gt;
&lt;p&gt;这里要引出取模运算的运算规则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(a+b)%p=(a%p+b%p)%p
(a-b)%p=(a%p-b%p)%p
(a*b%p)=(a%p * b%p)%p
(a^b)%p=((a%p)^b)%p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;观察右侧式，先抛去7这个乘数，它的变化应该是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;9
99
999
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以表示为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d(0)=9
d(1)=d(0)*10+9
d(2)=d(1)*10+9
...
d(n)=d(n-1)*10+9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在要求&lt;code&gt;d(n)&lt;/code&gt;能不能整除&lt;code&gt;9K&lt;/code&gt;，可以递推式的表达，这样循环中每一次验证都只需要一次计算。&lt;/p&gt;
&lt;p&gt;最后考虑停机条件，时间限制为2s，以CPU 1GHz的速度来考虑，保守的可以设置停机条件为2e7。如果2e7位数还没有找到，大概率是没有了。&lt;/p&gt;
&lt;p&gt;完整的代码可以写为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; K;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; K;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; K;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(K &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; K &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20000000&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
        d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (d&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;s;
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;one-more-thing&#34;&gt;one more thing&lt;/h3&gt;
&lt;p&gt;关于模运算有很多有趣的知识，其中一些在OJ中经常常用，快速幂就是其中一个。&lt;/p&gt;
&lt;p&gt;快速幂的全称是“快速计算一个幂式的模（余）”&lt;/p&gt;
&lt;p&gt;假如我们要计算&lt;code&gt;a^b mod c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果我们直接算&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;b;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
{
  ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a;
}
ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; c;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么当b比较大的时候，&lt;code&gt;long long &lt;/code&gt;也是撑不住的，数据会溢出。&lt;/p&gt;
&lt;p&gt;可以根据模运算的性质&lt;code&gt;(a^b)%p=((a%p)^b)%p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在算指数之前先取模，这样可以小一些&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; c;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;b;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
{
  ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a;
}
ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; c;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果一个因子取余不影响最终结果，那么中间的因子取余应该也是不影响结果的（反正最后都被消掉，可以在计算指数的过程中消掉）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; c;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;b;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
{
  ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ans &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;c;
}
ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; c;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在已经比最开始好很多了，但现在的复杂度式还是&lt;code&gt;O(b)&lt;/code&gt;，当b比较大的时候还是有可能超时。&lt;/p&gt;
&lt;p&gt;也就是问题出现在求指数的过程中，这里要考虑到如何快速计算幂式，我们可以这样考虑
$$
2^{1000}=4^{500}
$$
底数做一次平方，运算次数少了一半，如果是奇数
$$
2^{1001}=4^{500}*2
$$
现在先不考虑幂式求模余的问题，如果单纯要求快速计算&lt;code&gt;a^b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法应该是这样的&lt;/p&gt;
&lt;p&gt;当指数b是偶数时，平方底数，指数b自除2；&lt;/p&gt;
&lt;p&gt;当指数b是奇数时，先用一个数才收集落单的底数，然后平方底数，b自减1再除2。&lt;/p&gt;
&lt;p&gt;最后除到b为1的时候，用于收集落单的底数的数就会乘以最后的底，从而变成最终结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QuickPower&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(b &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a;
            b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }
        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如何应用在求幂式的模余中呢？应该是很简单的。&lt;/p&gt;
&lt;p&gt;当指数b是偶数时，平方底数，指数b自除2；&lt;/p&gt;
&lt;p&gt;当指数b是奇数时，先让ans乘以底数a（这里可以对c取模优化），用于收集落单的底数，然后平方底数，b自减1再除2。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PowerMod&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; c;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(b &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
            ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ans &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; c;
        }
      &lt;span style=&#34;color:#75715e&#34;&gt;//由于是整形，不减1直接除二也是可以的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
     &lt;span style=&#34;color:#75715e&#34;&gt;// 下面这种写法也是可以的，右移操作也是可以实现除二，并且自动舍去了余数（就是对整数这样操作不tidy）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// b = b &amp;gt;&amp;gt; 1 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; c;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Always Know What Is Important</title>
      <link>https://luosuu.github.io/post/always-know-what-is-important/</link>
      <pubDate>Fri, 27 Mar 2020 12:00:09 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/always-know-what-is-important/</guid>
      <description>&lt;p&gt;整理心情，重新出发&lt;/p&gt;
&lt;p&gt;我身边的朋友可能知道我最近遭遇了一点小挫折，大学道路陷入了一些迷茫。开下自己的玩笑，就是又“焦虑”了。&lt;/p&gt;
&lt;p&gt;然而高帆学长应该是在他无意之间，给我了很大的帮助。让我重新认识到我想要从事程序语言（PL）方向的初心，并认识到自己的规划的不合理之处。感谢学长的鞭策。&lt;/p&gt;
&lt;p&gt;这里我想重新谈一下sicp，当初读sicp是看重了两方面，一方面是想打基础修内功，另一方面是作为MIT的基础课程，上手难度不会太大。王垠前辈有一篇博客，讲的是&lt;a href=&#34;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&#34;&gt;如何构造自己的解释器&lt;/a&gt;。其中sicp的第一二章为先修内容。&lt;/p&gt;
&lt;p&gt;我曾经过分看重“如何设计一个语言”，“如何构造一个编译器”这种过于“落地”的问题，却忽略了内核，忽略了最开始我入坑的兴趣点。另外，我也太过于容易受旁人的影响，盲目去崇拜龙书、虎书等，并将编译器的工作和PL的工作混淆起来。&lt;/p&gt;
&lt;p&gt;国内的很多教材重视所谓“前端”，包括龙书在内将parser技术长篇大论。然正如&lt;a href=&#34;http://www.yinwang.org/blog-cn/2015/09/19/parser&#34;&gt;对 Parser 的误解&lt;/a&gt;里王垠所言，语义转化和优化才是精华的内容，才是软件的核心。学习不是为了解决人为制造的困难而显得高级，而是为了理解其中的原理。如此“头重脚轻”，增大了学习的困难，消磨了学习的热情。&lt;/p&gt;
&lt;p&gt;我在上篇博客整理了下PL相关的学习内容，再结合我“烂尾”的Todo，我学习的优先顺序应该为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;南京大学《软件分析》课程&lt;/li&gt;
&lt;li&gt;SICP&lt;/li&gt;
&lt;li&gt;EOPL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个学期内，能够完成这些内容，可以说是善莫大焉。理解了核心的概念和理念之后，再去看编译器的构造一类，就是工程上的细枝末节和摸索了。&lt;/p&gt;
&lt;p&gt;最后想谈一下国内PL界的风云人物，有很多人确实是受大佬影响而了解的，但也终要能做出他们的影子，独立的思考与研究，真的找到自己感兴趣的内容和关键点才行，而不是大佬在做什么，我就想了解什么，想学什么。大佬之所以为大佬，是因为他们有由衷的热爱和踏实的努力。最后，还是要靠实力说话的。要看清自己该踏踏实实走的路，也莫要想走什么捷径。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arrangement of Learning Resources</title>
      <link>https://luosuu.github.io/post/arrangement-of-learning-resources/</link>
      <pubDate>Mon, 16 Mar 2020 11:32:11 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/arrangement-of-learning-resources/</guid>
      <description>&lt;p&gt;资源整理向博客&lt;/p&gt;
&lt;p&gt;课程的完整列表可见：&lt;/p&gt;
&lt;p&gt;​	https://github.com/shining1984/PL-Compiler-Resource&lt;/p&gt;
&lt;h2 id=&#34;课程&#34;&gt;课程&lt;/h2&gt;
&lt;h3 id=&#34;静态分析&#34;&gt;静态分析&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/av91858985&#34;&gt;南京大学《软件分析》课程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;无教材&lt;/li&gt;
&lt;li&gt;有PPT&lt;/li&gt;
&lt;li&gt;国内老师，讲的很清楚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cis.upenn.edu/~cis341/current/&#34;&gt;Upenn-Software Analysis and Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://homepages.dcc.ufmg.br/~fernando/classes/dcc888/ementa/&#34;&gt;Dr.Fernando-DCC888&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;有PPT，引用资料全&lt;/li&gt;
&lt;li&gt;针对静态分析程序分析，及其优化部分&lt;/li&gt;
&lt;li&gt;有一部分LLVM的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cs.au.dk/~amoeller/spa/&#34;&gt;Universitas Arhusiensis-Static Program Analysis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;覆盖了静态分析的基本内容&lt;/li&gt;
&lt;li&gt;有教材，较成体系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xiongyingfei.github.io/SA/2019/main.htm&#34;&gt;北京大学《软件分析技术》&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;有课件&lt;/li&gt;
&lt;li&gt;内容覆盖宽广&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;编译器&#34;&gt;编译器&lt;/h3&gt;
&lt;h4 id=&#34;1-stanford&#34;&gt;(1) Stanford&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://web.stanford.edu/class/archive/cs/cs143/cs143.1128/&#34;&gt;CS143:Compilers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;编译器基础知识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://suif.stanford.edu/~courses/cs243/&#34;&gt;CS234:Advanced Compilers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;程序分析和优化技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://web.stanford.edu/class/cs343/&#34;&gt;CS 343&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;最新的研究成果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简化内容的视频资源：https://www.bilibili.com/video/av18939632&lt;/p&gt;
&lt;h4 id=&#34;2-upenn&#34;&gt;(2) Upenn&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cis.upenn.edu/~cis341/current/&#34;&gt;CIS 341-Compilers Spring 2020&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本编译器课程&lt;/li&gt;
&lt;li&gt;词法/语法分析、代码生成、语义分析、优化和运行时支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-rice-university&#34;&gt;(4) Rice University&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.clear.rice.edu/comp412/&#34;&gt;COMP412&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;5-sacramento&#34;&gt;(5) Sacramento&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/av81692863&#34;&gt;CSC 151: Compiler Construction&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;6-uiuc&#34;&gt;(6) UIUC&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://courses.engr.illinois.edu/cs426/fa2019/&#34;&gt;CS426&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://polaris.cs.uiuc.edu/~padua/cs526/&#34;&gt;CS526-2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://courses.engr.illinois.edu/cs526/sp2020/&#34;&gt;CS526-2020 (Not started yet)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;p&gt;1.&lt;a href=&#34;https://www.bilibili.com/video/av8515129&#34;&gt;MIT-sicp&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;博客&#34;&gt;博客&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://fleurer.github.io/lyah/chapters.htm&#34;&gt;Haskell趣学指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thautwarm.github.io/Site-32/&#34;&gt;thautwarm的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://numbbbbb.com/2016/03/28/20160328_%E6%88%91%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%A4%E5%91%A8%E6%97%B6%E9%97%B4%E5%88%B7%E5%AE%8C%20SICP/&#34;&gt;梁杰的博客-20天刷完sicp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://okmij.org/ftp/&#34;&gt;okmij.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pl-enthusiast.net/2015/05/27/what-is-pl-research-and-how-is-it-useful/&#34;&gt;What is PL research and how is it useful&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;书&#34;&gt;书&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://mitpress.mit.edu/sites/default/files/sicp/index.html&#34;&gt;SICP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.filepicker.io/api/file/jjQ29xA9RP29juOcGbRL&#34;&gt;Programming Language Pragmatics&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Start PLT</title>
      <link>https://luosuu.github.io/post/start-plt/</link>
      <pubDate>Thu, 05 Mar 2020 18:38:45 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/start-plt/</guid>
      <description>&lt;p&gt;研究事物的原理和构造，掌握基本方法。&lt;/p&gt;
&lt;h2 id=&#34;记一个开始&#34;&gt;记一个开始&lt;/h2&gt;
&lt;p&gt;今天我的SICP实体版到了，虽然有官方html转的PDF，并且英文版的表达也清晰优雅，但是还是抵不住实体版拿在手里的实在。&lt;/p&gt;
&lt;p&gt;这学期开始时我花了三到四周的时间读了《计算机网络：自顶向下方法》的主要内容，近期也准备写一个摘要清理一下脉络。&lt;/p&gt;
&lt;p&gt;我准备花我下半个学期的精力努力研读这本《Structre and Interpretation of Computer Programs》，争取在一月份初，也就是两个月后读完它的主要内容。&lt;/p&gt;
&lt;p&gt;鼓励下我自己：&lt;/p&gt;
&lt;p&gt;坚信一切都是纸老虎，投入全部的精力和时间去思考和研究，不要提前做规划，前面说的两个月只是参考，实际上是竭力而为。&lt;/p&gt;
&lt;p&gt;最后这里记一下PLT相关的，其他的参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thautwarm.github.io/Site-32/&#34;&gt;thautwarm的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[梁杰的博客](&lt;a href=&#34;http://numbbbbb.com/2016/03/28/20160328_&#34;&gt;http://numbbbbb.com/2016/03/28/20160328_&lt;/a&gt;我如何用两周时间刷完 SICP/)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/marisa&#34;&gt;知乎专栏：雾雨魔法店&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《程序语言设计：实践之路》&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://okmij.org/ftp/&#34;&gt;okmij.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pl-enthusiast.net/2015/05/27/what-is-pl-research-and-how-is-it-useful/&#34;&gt;What is PL research and how is it useful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;p&gt;我推荐开始之前先看看上面的链接里第二个和最后一个，了解一下大概的情况以及这个领域关心的问题。&lt;/p&gt;
&lt;p&gt;然后这里搬运一下macOS如何安装MIT-scheme，因为SICP的代码都是基于MIT-scheme的，不过只要是符合IEEE-1990的scheme标准的lisp方言，都可以运行SICP第二版的代码（第二版前言述）。&lt;/p&gt;
&lt;p&gt;首先下载MIT-Scheme的 .dmg文件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ftp.gnu.org/gnu/mit-scheme/stable.pkg/9.2/mit-scheme-9.2-x86-64.dmg&#34;&gt;64-bit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于macOS Catalina只支持64位的软件了，所以我推荐下载64位的。下面的是32位的下载链接:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ftp.gnu.org/gnu/mit-scheme/stable.pkg/9.2/mit-scheme-9.2-i386.dmg&#34;&gt;32-bit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载完成后，打开dmg文件把app拖进Application文件夹。&lt;/p&gt;
&lt;p&gt;64位请打开terminal运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo ln -s /Applications/MIT&lt;span style=&#34;color:#ae81ff&#34;&gt;\:&lt;/span&gt;GNU&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Scheme.app/Contents/Resources /usr/local/lib/mit-scheme-x86-64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般会要求你输入密码&lt;/p&gt;
&lt;p&gt;然后运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo ln -s /usr/local/lib/mit-scheme-x86-64/mit-scheme /usr/bin/scheme
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不行，把 &lt;code&gt;/usr/bin/scheme&lt;/code&gt;换成&lt;code&gt;/usr/local/bin/scheme&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在你可以在terminal里直接输入 &lt;code&gt;scheme&lt;/code&gt; 启动了，启动后输入&lt;code&gt;(+ 1 1)&lt;/code&gt;看看是不是运行正常。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;上述方法搬自&lt;a href=&#34;https://jacksonisaac.wordpress.com/2014/03/25/installing-scheme-on-mac-os-x/&#34;&gt;JACKSON&amp;rsquo;S BLOG&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;之后你就可以开始草书了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Azure CLI to Deploy Containers</title>
      <link>https://luosuu.github.io/post/azure_contianer_cli/</link>
      <pubDate>Wed, 13 May 2020 12:00:09 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/azure_contianer_cli/</guid>
      <description>&lt;p&gt;最近因为一些原因在折腾Azure，毕竟不能浪费微软爸爸发的每月150刀额度。&lt;/p&gt;
&lt;p&gt;创建资源组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;az group create &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--name &amp;lt;Resourse Group Name&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--location eastus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;az container create &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--resource-group &amp;lt;Resourse Group Name&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--name &amp;lt;Container Tag Name&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--image &amp;lt;Your IMG&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--ports &lt;span style=&#34;color:#ae81ff&#34;&gt;8388&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--location eastus &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--ip-address public &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--restart-policy Always &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--environment-variables &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;		PASSWAORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;YOUR PWD&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;		METHOD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chacha20-ietf-poly1305
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;az container show &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--resource-group &amp;lt;Resourse Group Name&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--name &amp;lt;Container Tag Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在容器中执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;az container exec \
  --resource-group learn-deploy-aci-rg \
  --name mycontainer \
  --exec-command /bin/sh
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Azure CLI VM Deployment</title>
      <link>https://luosuu.github.io/post/azure-vm-deployment/</link>
      <pubDate>Wed, 13 May 2020 12:00:09 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/azure-vm-deployment/</guid>
      <description>&lt;p&gt;用Azure CLI快速部署一台实例。&lt;/p&gt;
&lt;p&gt;注意这些操作都可以用Azure门户快速实现，Azure CLI不是唯一选择。&lt;/p&gt;
&lt;p&gt;创建资源组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;az group create &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name &amp;lt;resource-group-name&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --location &amp;lt;resource-group-location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在创建的资源组里创建VM&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;az vm create &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --resource-group servers &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name MeanStack &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --image credativ:Debian:10:latest  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --admin-username azureuser &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --generate-ssh-keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开VM端口的80端口方便访问在其上的网页服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;az vm open-port &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --port 80&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --resource-group &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;resource group name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name MeanStack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建SSH与VM的链接，首先先把vm的ip地址存在bash的变量中方便操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ipaddress&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;az vm show &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name MeanStack &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --resource-group &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;resource group name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --show-details &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --query &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;publicIps&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --output tsv&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh azureuser@$ipaddress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样VM就已经准备就绪了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Homogenization and Diversification</title>
      <link>https://luosuu.github.io/post/homogenization-and-diversification/</link>
      <pubDate>Sat, 28 Mar 2020 16:14:22 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/homogenization-and-diversification/</guid>
      <description>&lt;p&gt;记有关“同质化与多样化”一堂课的相关思考。&lt;/p&gt;
&lt;h2 id=&#34;专业化的高效和灵活化的强适应&#34;&gt;专业化的高效和灵活化的强适应&lt;/h2&gt;
&lt;p&gt;在讨论“同质化和多样化之前”，我想先讨论下专业化和灵活化。&lt;/p&gt;
&lt;p&gt;拿最近武汉应对疫情的例子来说，武汉市在疫情爆发前，是得到表彰的模范城市，夺得多次奖项，但在疫情这种特殊紧急情况爆发的时候，出现了许多问题，并遭到了许多人的批评。从微观上来看，这是因为每一层的负责人在紧急情况下不敢跳出常规、当机立断，选择了最安全的做法，也就是等待上级的决断；而从宏观上来看，是因为科层制体制在长久的发展中已经过于专业化，失去了面对紧急情况需要具有的灵活性的强适应能力。&lt;/p&gt;
&lt;p&gt;这不是说科层制是错的，相反，科层制是全球普遍使用的，长期实践证明的高效组织管理形式。科层制通过对常规事件的层层流程化和规范化，保证了日常执行的高效和准确。问题在于，当紧急情况出现，超出了日常规范的范围之后，基层管理组织就会陷入混乱和被动，他们为了自保而选择等待上级的判断，而很多灾难是不等人的，就错过了管控和遏制的良机。我国的管理体制当然考虑到了这一点，提出的解决办法就是每一层都要制定所谓的“紧急预案”，在突发情况时给基层提供由常规态转到应急态的方式，这类“紧急预案”在我国统计已有550万份之多，然从这次疫情的情况来看，效果并不理想。&lt;/p&gt;
&lt;p&gt;那就没有什么好的办法了吗？这里我想提一下有关我国制造业的一个例子。1994年，我国实行分税制改革，革除包干制，地方政府不再”交齐国家的，剩下的就是自己的“，变成了一部分种类的税收归国家所有，剩下的一部分税种归地方政府所有，而建筑类税收就归地方所有，地方还可以拍卖土地使用权获得收入，这极大的促进了房地产和开发区的建设。有很多人称我国为”世界工厂“，是因为我国的城郊有许多“开发区”，在那里有许多许多企业，其中很多是制造类企业，这些制造类企业接受着来自世界各地的订单，生产着各型各样的产品。&lt;/p&gt;
&lt;p&gt;这些制造类企业通常不会很大，却十分专精，可能只专注于生产于一两个小零件，但是这些小企业可以互相组合，生产出五花八门的产品。&lt;em&gt;每个小企业的专门化保证了生产的效率，而互相组合形成的网络产生了巨大的弹性，表现出了对市场的强适应性&lt;/em&gt;。而恰逢西方国家在20世纪末21世纪初转型进入“创新经济时代”，对产品的迭代速度和更新速度有了极大的要求，而企业很难在拥有一条完全自主的生产线保证高效化的同时保证产品的迭代速度，这导致了很多企业式微（如诺基亚就拥有一条完整的自主生产线，导致产品迭代变化的成本很高，最终渐渐倒塌），也逼迫很多企业将生产环节完全迁出，以避免快速迭代产品的巨大生产成本，自己只负责跟上顶层的产品设计。这和中国的发展开发区和企业园区的需求不谋而合。正所谓时势造英雄，中国就这样产生了制造业的高速发展，也是中国经济腾飞的奥秘。我相信这个例子，还是有很大参考的价值。&lt;/p&gt;
&lt;h2 id=&#34;同质化与多样化&#34;&gt;同质化与多样化&lt;/h2&gt;
&lt;p&gt;与“专业化和灵活化”相对应的一个很重要的话题，是“同质化与多样化”。&lt;/p&gt;
&lt;p&gt;在押井守的著名动画电影《攻壳机动队》（1995）里，一个拥有自我意识的“生命体”诞生于网络中信息的海洋。它非常的清楚自己的缺陷，那就是它虽然可以不断复制，但是缺少了生物的多样性和唯一性，一个计算机病毒就可能将它和它的复制体全部摧毁，为了获得多样性和唯一性，它找上了片中的女主角草薙素子，希望能和她的意识融合。&lt;/p&gt;
&lt;p&gt;片中多次提及了关于同质化与多样化的内容。素子所在的公安九科全都是义体化非常高的生化人，除了脑组织以外大部分都是义肢，而素子却选择将一个保留了几乎全部肉身的警察陀古萨调到九科任职。当陀古萨问及为什么，素子表示虽然义体化的人机能强大，但是&lt;em&gt;一个组织过于单一必将走向灭亡&lt;/em&gt;，而陀古萨就是用来增加组织的多样性和不确定性的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://luosuu.github.io/Motoko.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;生物的族群虽然看起来每个个体都十分相似，但是每个人的基因和性状又如此独特而不同，每当灾难来临，虽然可能发生族群大部分的消亡，而经常有因其独特性而坚强活下来的个体，保证了种族的延续。&lt;/p&gt;
&lt;p&gt;关于这个话题，我想讨论的就是这些了，感谢你的阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>To Do 2020 WinterVacation</title>
      <link>https://luosuu.github.io/post/to-do-2020-wintervacation/</link>
      <pubDate>Thu, 05 Mar 2020 19:31:15 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/to-do-2020-wintervacation/</guid>
      <description>&lt;p&gt;寒假ToDoList，用来公开处刑，完不成请私信我让我女装&lt;/p&gt;
&lt;h2 id=&#34;basic&#34;&gt;Basic&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;sicp主要内容并写读书笔记&lt;/li&gt;
&lt;li&gt;托福备考&lt;/li&gt;
&lt;li&gt;C++ STL&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;additional&#34;&gt;Additional&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;用SFML写linux下的STG&lt;/li&gt;
&lt;li&gt;补课数学&lt;/li&gt;
&lt;li&gt;钢琴基础，避免下学期被爆&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>SICP-1.1:Element and Expressions</title>
      <link>https://luosuu.github.io/post/sicp-1-1/</link>
      <pubDate>Thu, 05 Mar 2020 18:53:26 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/sicp-1-1/</guid>
      <description>&lt;p&gt;sicp的1-1主要内容是程序设计的基本元素&lt;/p&gt;
&lt;h2 id=&#34;基本元素&#34;&gt;基本元素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本表达形式：对最简单的元素操作&lt;/li&gt;
&lt;li&gt;组合的方法：将基本的表达组合起来形成一块复合的对象&lt;/li&gt;
&lt;li&gt;抽象的方法：命名复合对象，使得他们能够封装成一个黑箱&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;表达式式的求值&#34;&gt;表达式式的求值&lt;/h2&gt;
&lt;h3 id=&#34;基本表达式&#34;&gt;基本表达式&lt;/h3&gt;
&lt;p&gt;规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数的值就是它表示的数值大小&lt;/li&gt;
&lt;li&gt;运算符指能运行的操作的机器指令序列&lt;/li&gt;
&lt;li&gt;其他名字是在该环境下关联于这个名字的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;组合表达式&#34;&gt;组合表达式&lt;/h3&gt;
&lt;p&gt;由表达式组合而成的组合式，组成这个组合式的表达式称为该组合式的子表达式（不排除该子表达式也是组合式），它的求值规则如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求值该组合式的子表达式&lt;/li&gt;
&lt;li&gt;运用该组合式的运算符号，应用于其实际参数（也就是实际的值而不是表达式，此时子表达式应该都已经计算为实际的数值）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;考虑到子表达式也可能是个组合式，那么就需要不断进行第一步，直到我们运算的对象是基本元素，也就是求组合式的过程需要调用自己，也就是这个过程就是 &lt;em&gt;递归&lt;/em&gt; 的。&lt;/p&gt;
&lt;p&gt;此时我们可以用树的方法来表示它。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://luosuu.github.io/%E6%96%B9%E6%B3%95%E6%A0%91.png&#34; alt=&#34;tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;递归这种方法是处理层次性结构（比如树）的一种强有力的技术。&lt;/p&gt;
&lt;p&gt;在表达式的树里，数值从树的最末端不断向上移动，这种过程我们一般称为&lt;em&gt;树形积累&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;环境是极其重要的，在我们定义的一个过程中（也就是我们抽象出来的一个过程），形式参数的命名应该是无关紧要的，这个过程中的同一个形式参数统一换成另外一个名字，应该是不对这个过程产生任何影响的。&lt;/p&gt;
&lt;p&gt;这对于我们封装一个过程极其重要，它可以依赖于外部的一些过程（和在这个过程在同一个环境的其他过程），但是它自己约束的变量，也就是它的形式参数不应该受到外界的控制。&lt;/p&gt;
&lt;p&gt;同时这有利于我们定义 &lt;em&gt;块结构&lt;/em&gt; ，所谓块结构，就是我们在抽象一个过程时，发现它可以用多个子过程实现，我们不选择在这个过程外抽象它的子过程，而选择在这个过程内部抽象它的子过程。&lt;/p&gt;
&lt;p&gt;在块结构中，我们抽象的子过程只能在这个块内使用，且对于子过程来说，该过程的形式参数是可以依赖和修改的。&lt;/p&gt;
&lt;p&gt;本来我们求立方根的过程是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(sqrt x)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; x))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; guess x)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;good-enough?&lt;/span&gt; guess x)
    guess
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;improve&lt;/span&gt; guess x) x)))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;good-enough?&lt;/span&gt; guess x)
    (&amp;lt; (abs (- (&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; guess) x)) &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;improve&lt;/span&gt; guess x)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;average&lt;/span&gt; guess (/ x guess)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;sqrt&lt;/code&gt;依赖的子过程全部改到它的内部后&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(sqrt x)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;good-enough?&lt;/span&gt; guess x)
        (&amp;lt; (abs (- (&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; guess) x)) &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;improve&lt;/span&gt; guess x)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;average&lt;/span&gt; guess (/ x guess)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; guess x)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;good-enough?&lt;/span&gt; guess x)
            guess
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;improve&lt;/span&gt; guess x) x)))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们发现在子过程中将x的值传来传去没啥意义，他们可以直接访问并且修改x&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(sqrt x)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;good-enough?&lt;/span&gt; guess)
        (&amp;lt; (abs (- (&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; guess) x)) &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;improve&lt;/span&gt; guess)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;average&lt;/span&gt; guess (/ x guess)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; guess)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;good-enough?&lt;/span&gt; guess)
            guess
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;improve&lt;/span&gt; guess))))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解释的顺序application-order与normal-order&#34;&gt;解释的顺序：application-order与normal-order&lt;/h2&gt;
&lt;p&gt;application-order就是将基本表达式求值，从基本的单元解释命名空间里的所有变量，然后一层层推上去，也就是上文组合式的表达方式。&lt;/p&gt;
&lt;p&gt;normal-order则是先不去算表达式的值，先从外不断按照它的解释去展开定义，直到无法展开，只有计算基本表达式的时候才能往下推进时才计算基本表达式。&lt;/p&gt;
&lt;p&gt;可以证明，那些可以通过替换去模拟，并且产生合法值的所有过程，他们采用这两种方式输出的结果应该是一样的。&lt;/p&gt;
&lt;p&gt;一般而言，都是采用application-order,这样可以避免重复计算表达式。&lt;/p&gt;
&lt;p&gt;这里想要说明的是解释的顺序的重要性，比如SICP例题1-5和1-6就明显的说明了这个问题。&lt;/p&gt;
&lt;p&gt;对于1-5&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; x y)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= x &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        y))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面是一个用来测试过程是应用application-order还是norma-order的样例。&lt;/p&gt;
&lt;p&gt;如果采用前者，那么解释器会先尝试解释(p),然后再往上运行test的内容，然而(p)用自己解释自己，这样只会陷入死循环，不断输出它解释出来的内容，也就是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果采用normal-order，那么解释器就会先从test的内容开始，过程如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;))
  
(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;))
  
(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;))
  
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于1-6&lt;/p&gt;
&lt;p&gt;这位同学自己新定义的new-if的差距在于与if的解释顺序不同。&lt;/p&gt;
&lt;p&gt;new-if在解释器看来就是一个普通的过程，所以解释器会去先尝试去解释那三个参数，如果这三个参数参与了递归过程，那么就是自解释了，陷入死循环。&lt;/p&gt;
&lt;p&gt;而if会先解释判别式，然后在去选择后面的值进行解释，不会陷入死循环。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linear Recursion and Iteration</title>
      <link>https://luosuu.github.io/post/linear-recursion-and-iteration/</link>
      <pubDate>Thu, 05 Mar 2020 18:52:22 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/linear-recursion-and-iteration/</guid>
      <description>&lt;p&gt;迭代语法的解释/计算过程&lt;/p&gt;
&lt;h2 id=&#34;过程的产生&#34;&gt;过程的产生&lt;/h2&gt;
&lt;p&gt;我们在&lt;a href=&#34;https://luosuu.github.io/posts/sicp-notes-1-1/&#34;&gt;Elements and Expressions&lt;/a&gt;里，已经讨论了程序的基本元素与表达式。&lt;/p&gt;
&lt;p&gt;现在的我们已经可以进行基本的算术操作，对操作进行组合然后抽象、定义为一个复合过程。但是我们还不能说我们已经了解了编程这件事，因为我们现在就像知道了手里的卡牌的使用方法，但是不清楚游戏常见的战术一样，也就是说我们现在缺乏经验，无法预知我们采取的每个动作的后果（执行一个过程的效果）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ability to visualize the consequences of the actions under consideration is crucial to becoming an expert programmer, just as it is in any synthetic, creative activity. –sicp 1.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，我们需要对我们执行的过程有足够的了解，了解他们运作的模式，还要研究这些计算过程消耗的资源（时间和空间）&lt;/p&gt;
&lt;p&gt;在1.2.1，我们主要关注递归语法的两种计算过程。&lt;/p&gt;
&lt;p&gt;在开始之前，我们要搞清楚一个事情，那就是 &lt;em&gt;递归过程&lt;/em&gt; 和 &lt;em&gt;递归计算过程&lt;/em&gt; 是两回事，前者指语法的结构的事实，也就是它的定义需要调用它自己，后者是解释递归语法的一种计算方式。&lt;/p&gt;
&lt;h2 id=&#34;递归计算过程线性递归过程&#34;&gt;递归计算过程（线性递归过程）&lt;/h2&gt;
&lt;p&gt;考虑一个递归，计算阶乘&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; n)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        (* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们观察它的过程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(* &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
(* &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
(* &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))
(* &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
(* &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;720&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从“形状”上来看，它先不断展开，越来越长，这是因为它必须不断延后它需要实施的运算，然后他会不断收缩，这是实际运算不断实施的体现。&lt;/p&gt;
&lt;p&gt;这类“不断推延运算，需要解释器维护一个运算链条”的过程，我们称为 &lt;em&gt;递归计算过程&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;迭代计算过程线性迭代过程&#34;&gt;迭代计算过程（线性迭代过程）&lt;/h2&gt;
&lt;p&gt;然后我们考虑另外一个计算阶乘的过程，刚才我们是从大的数不断计算到小的数，现在我们反过来，从小的数的阶乘开始算，算到大头的数的阶乘。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; n)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; n))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; product counter max-count)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; counter max-count)
        product
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; (* counter product)
                    (+ counter &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                    max-count)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们用到上一节的块结构，可以把&lt;code&gt;fact-iter&lt;/code&gt;隐藏到函数内部&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; n)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; product counter)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; counter n)
            product
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; (* counter product)
                    (+ counter &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们考虑它的计算过程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;720&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们会发现它有如下重要的性质：&lt;/p&gt;
&lt;p&gt;首先它用的每一步的运算过程都可以独立出来，不需要维持上一步的运算，也就是它用三个 &lt;em&gt;状态变量&lt;/em&gt; 完整的描述了这个计算过程，同时它又规定了变量如何向下一个状态转换的计算规则，还有一个（可能会有）的结束检测。&lt;/p&gt;
&lt;p&gt;也就是我们只需要提供这三个状态变量，解释器就可以计算下去，而对比上面说过的递归计算过程，除了变量以外，它还要维持一些隐形的信息（在这里就是外面有多少套嵌的乘法），其实二者的差别根本在于是否明示了 &lt;em&gt;当前计算在这个过程的哪一处&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们称这种计算方式为 &lt;em&gt;迭代计算过程（线性迭代过程）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;注意，我们在这里我们并没有使用其他语言里常见的 &lt;em&gt;特殊的循环结构&lt;/em&gt; ，譬如 &lt;code&gt;do while&lt;/code&gt;，&lt;code&gt;for&lt;/code&gt;等等。scheme里的实现没有这一环，scheme总能 &lt;em&gt;在常量空间里执行迭代计算过程，即使这个过程是用递归描述的&lt;/em&gt; ，具有这一特性的实现，我们称其为 &lt;em&gt;尾递归&lt;/em&gt; 的。&lt;/p&gt;
&lt;p&gt;有了尾递归的实现，我们就不需要一些特殊的专用迭代结构，可以用常规的过程调用来实表述迭代。&lt;/p&gt;
&lt;h2 id=&#34;对比&#34;&gt;对比&lt;/h2&gt;
&lt;p&gt;虽然在这里我们发现树形递归比线性递归要低效的多，但是我们要注意到树形递归的表达能力很好，它很直接了当，对于我们理解和设计程序非常有帮助。&lt;/p&gt;
&lt;p&gt;另外，当我们考虑一种层次结构性的数据上操作时，而不是对数操作时，我们会发现树形递归计算是一种自然、威力强大的工具。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://luosuu.github.io/posts/sicp-notes-1-1/&#34;&gt;Elements and Expression&lt;/a&gt;里，对于求值表达式，解释器采用的策略就是树形递归计算过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SICP: order of growth</title>
      <link>https://luosuu.github.io/post/sicp-rank/</link>
      <pubDate>Thu, 05 Mar 2020 18:50:56 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/sicp-rank/</guid>
      <description>&lt;p&gt;作为讨论线性迭代与递归的延续，我们来讨论计算过程的阶数。&lt;/p&gt;
&lt;h2 id=&#34;计算过程的阶数&#34;&gt;计算过程的阶数&lt;/h2&gt;
&lt;p&gt;经过&lt;a href=&#34;https://luosuu.github.io/posts/linear-recursion-and-iteration/&#34;&gt;Linear Recursion and Iteration&lt;/a&gt;我们大概知道了不同的计算过程的代价是不同的，为了实现同样的目标，不同的计算过程消耗的时空资源差距很大。&lt;/p&gt;
&lt;p&gt;因此我们需要提供一种评估不同计算过程消耗资源的情况的方法。&lt;/p&gt;
&lt;p&gt;我们用n来代表问题规模的大小，也就是某个模式下问题的输入。我们需要衡量的是当输入变大时（问题规模变大时），某一计算过程所需资源粗略的增长的情况。&lt;/p&gt;
&lt;p&gt;对于不同的问题我们取的n很可能是不一样的，但是确定的是n肯定是和计算过程的难度/步数紧密相关的，让我们可以根据它来分析计算过程。例如计算平方根的过程这个n我们可以取要精确的小数点后多少位，矩阵乘法可以取矩阵的行数。&lt;/p&gt;
&lt;p&gt;然后我们记R(n)为处理规模为n的问题时所需要的资源量，称之为 &lt;em&gt;增长阶&lt;/em&gt; 。总之它是一个用n表达的函数。&lt;/p&gt;
&lt;p&gt;R(n)=Θ(f(n))R(n)=Θ(f(n))&lt;/p&gt;
&lt;p&gt;且对于任意大的n，存在与n无关的k1和k2，使得&lt;/p&gt;
&lt;p&gt;k1f(n)≤R(n)≤k2f(n)k1f(n)≤R(n)≤k2f(n)&lt;/p&gt;
&lt;p&gt;对于斐波那契计算，树形递归需要的步数是&lt;/p&gt;
&lt;p&gt;Θ(ϕn)Θ(ϕn)&lt;/p&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;p&gt;ϕ2=ϕ+1ϕ2=ϕ+1&lt;/p&gt;
&lt;p&gt;空间为&lt;/p&gt;
&lt;p&gt;Θ(n)Θ(n)&lt;/p&gt;
&lt;p&gt;而对于线性迭代过程，步数和空间为&lt;/p&gt;
&lt;p&gt;Θ(n),Θ(1)Θ(n),Θ(1)&lt;/p&gt;
&lt;p&gt;也就是代表线性迭代过程的步数增长正比于n，而空间需求是个常数。&lt;/p&gt;
&lt;h2 id=&#34;增长阶的价值&#34;&gt;增长阶的价值&lt;/h2&gt;
&lt;p&gt;注意这里的度量是一个很粗略的过程，比如一个计算过程的步数为&lt;/p&gt;
&lt;p&gt;3n2+10n+173n2+10n+17&lt;/p&gt;
&lt;p&gt;另外一个计算过程的步数为&lt;/p&gt;
&lt;p&gt;1000n21000n2&lt;/p&gt;
&lt;p&gt;那么这两个计算过程的增长的阶都是&lt;/p&gt;
&lt;p&gt;Θ(n2)Θ(n2)&lt;/p&gt;
&lt;p&gt;但是从外一个角度来看，我们可以通过增长阶窥见一个计算过程的增长变化。&lt;/p&gt;
&lt;p&gt;对于线性过程，规模增长一倍代表计算资源的需求也增长一倍；对于一个指数计算过程，问题规模每增长1都将导致所用资源按照某个常数倍增长；对于对数型增长的计算过程，但问题规模扩大一倍，所需资源量都只增加一个常数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sicp-1.3:Formulating Abstractions with Higher-Order Procedures</title>
      <link>https://luosuu.github.io/post/sicp-1-3/</link>
      <pubDate>Thu, 05 Mar 2020 18:49:12 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/sicp-1-3/</guid>
      <description>&lt;p&gt;“用高阶的函数做抽象”，本次我们更关注于过程本身的一些特性，以及相关的抽象方式&lt;/p&gt;
&lt;h2 id=&#34;lambda&#34;&gt;lambda&lt;/h2&gt;
&lt;p&gt;lambda表达式可以增强我们的表达能力，使我们表达一些简单的过程时非常方便，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样我们在很多地方就无须再构建辅助过程了，直接使用lambda表达就可以，lambda表达式的优点之一还在于这个过程没有名字，不与环境中的任何名字相关联，且lambda表达式内部的环境和一般的过程一样，与外部独立。&lt;/p&gt;
&lt;p&gt;然后我们需要介绍一下lambda的另外一种用法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;var_1&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &amp;lt;var_n&amp;gt;)
        &amp;lt;body&amp;gt;)
    &amp;lt;exp_1&amp;gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &amp;lt;exp_n&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其含义为，在body中将var_1至var_n解释为exp_1至exp_n&lt;/p&gt;
&lt;p&gt;比如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; x y)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b) (* a b))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; (+ y (* x x)))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; (- (* x y) x))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中f就为&lt;/p&gt;
&lt;p&gt;$$f(x,y)=(x^2+y)\cdot(x*y-x)$$&lt;/p&gt;
&lt;p&gt;这个使用方式有一个语法外衣let&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;var_1&lt;/span&gt; exp_1)
      &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;var_n&lt;/span&gt; exp_n)
    &amp;lt;body&amp;gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;let只是lambda上述使用方式的语法外衣，完全等效，但是看起来更舒适一点，var和exp一一对应。&lt;/p&gt;
&lt;h2 id=&#34;lisp中的过程&#34;&gt;lisp中的过程&lt;/h2&gt;
&lt;p&gt;在lisp当中，过程是更一般的对象，也就是既可以作为参数也可以作为返回值，如同就和一般的变量一般。&lt;/p&gt;
&lt;p&gt;我们来看以下方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;average-damp&lt;/span&gt; f)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;average&lt;/span&gt; x (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; x))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;average-damp是一个以f为参数的方法，返回的也是一个方法，返回的方法由lambda产生。&lt;/p&gt;
&lt;p&gt;average-damp可以用来求x和f(x)的平均值&lt;/p&gt;
&lt;p&gt;使用它的例子可以如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;average-damp&lt;/span&gt; square) &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是说我们可以将过程（也就是计算的方式）作为参数传递进另外一个过程，而那另外一个过程无须关心f具体是什么。&lt;/p&gt;
&lt;p&gt;这是一种重要的抽象机制，也是典型的复合过程（思考下和前面几篇提到过的复合过程的区别）。&lt;/p&gt;
&lt;p&gt;一般而言，设计语言时会对计算元素可能使用方式作出限制，限制最少的元素就被称作是具有 &lt;em&gt;第一级&lt;/em&gt; 的状态。&lt;/p&gt;
&lt;p&gt;在lisp中过程就是第一级状态的。（你可以想一下C语言中是否允许将函数作为参数进行传递）&lt;/p&gt;
&lt;p&gt;第一级元素有一些特权，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以用变量命名&lt;/li&gt;
&lt;li&gt;可以提供给过程作参数&lt;/li&gt;
&lt;li&gt;可以作为过程的结果返回&lt;/li&gt;
&lt;li&gt;可以包含在数据结构中（详情在sicp第二章中讲述）&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Introduction to SICP Chapter 2</title>
      <link>https://luosuu.github.io/post/introduction-to-sicp-chapter-2/</link>
      <pubDate>Thu, 05 Mar 2020 18:45:23 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/introduction-to-sicp-chapter-2/</guid>
      <description>&lt;p&gt;SICP第二章的导引&lt;/p&gt;
&lt;h2 id=&#34;所谓数据抽象&#34;&gt;所谓数据抽象&lt;/h2&gt;
&lt;p&gt;我们在第一章关注了 &lt;em&gt;计算过程&lt;/em&gt;，并了解了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本的数据和基本的操作(&lt;a href=&#34;https://luosuu.github.io/posts/sicp-notes-1-1/&#34;&gt;Element and Expressions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;如何将一些过程组合起来形成复合过程(&lt;a href=&#34;https://luosuu.github.io/posts/sicp-1-3/&#34;&gt;Formulating Abstractions with Higher-Order Procedures &lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;简单的算法分析和计算模式(&lt;a href=&#34;https://luosuu.github.io/posts/sicp-rank/&#34;&gt;Order of growth&lt;/a&gt;,&lt;a href=&#34;https://luosuu.github.io/posts/linear-recursion-and-iteration/&#34;&gt;Linear Recursion and Iteration&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二章将要关注构造 &lt;em&gt;复合数据&lt;/em&gt;。也就是我们要构造一种将数据组合起来的计算对象。&lt;/p&gt;
&lt;p&gt;其中的关键在于：数据对象的如何表示的部分，与数据对象的如何使用部分互相隔离，使其具有一定的模块性，这种技术一般称作 &lt;strong&gt;数据抽象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;进一步思考，如果分隔开了数据对象的表示细节和处理方法，那么理应站在处理方法的一侧看时，应该无须关心数据对象具体如何表示，无须为所用的数据做任何多余的假设；同时站在数据对象的表示一侧来看，它的数据定义应该和数据如何使用无关。将二者之间联通的部分（原书翻译为“界面”，或理解为“平台”），称为 &lt;em&gt;选择函数&lt;/em&gt; 和 &lt;em&gt;构造函数&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;数据抽象是我们用来克服问题复杂性的技术，它可以用于在程序的不同部分建立适当的 &lt;em&gt;抽象屏障&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;数据抽象的关键在于，程序设计语言中应该提供了一些“粘合剂“，可以将数据对象组合起来，形成更复杂的数据对象。在后面我们会解释其中的一些关键理念，如 &lt;em&gt;闭包&lt;/em&gt; 和 &lt;em&gt;符号表达式&lt;/em&gt;，他们用于构造和解释复杂的数据对象。&lt;/p&gt;
&lt;p&gt;而后我们需要一种”通用型的操作“，它必须能处理不同的数据结构。我们会引入&lt;em&gt;数据导向型的程序设计&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;第二章的关键在于理解数据抽象的概念，掌握相关的理念和方法（用斜体标注出来了）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sicp-2.1.1-Examples:Arithmetic Operations for Rational Numbers</title>
      <link>https://luosuu.github.io/post/sicp-2-1-1/</link>
      <pubDate>Thu, 05 Mar 2020 18:42:28 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/sicp-2-1-1/</guid>
      <description>&lt;p&gt;为了引入第二章的概念和主题，我们尝试构建有理数的数据类型并且定义它的计算方法。&lt;/p&gt;
&lt;h2 id=&#34;表示有理数&#34;&gt;表示有理数&lt;/h2&gt;
&lt;p&gt;我们知道有理数肯定可以用分数的方式来表示，而分数由分子和分母构成，因此我们可以用一对数的组合来表示分数，也就是有理数。&lt;/p&gt;
&lt;p&gt;好在scheme给我们提供了天然的数对结构Pairs，我们可以用以下方式将两个数组合起来&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;x (cons &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))

(car x)
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

(cdr x)
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们用cons操作将1和2组合起来，称之为x，car返回x的首元素，cdr返回x的尾元素。值得一提的是，数对的元素还可以是数对。&lt;/p&gt;
&lt;h2 id=&#34;运算有理数&#34;&gt;运算有理数&lt;/h2&gt;
&lt;p&gt;定义好了有理数，我们要定义有理数的运算方式。&lt;/p&gt;
&lt;p&gt;这里我们先定义三个基本的方法，分别是&lt;code&gt;make-rat&lt;/code&gt;,&lt;code&gt;numer&lt;/code&gt;,&lt;code&gt;denom&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make-rat&lt;/code&gt;将将两个数组合成有理数，而&lt;code&gt;numer&lt;/code&gt;返回分子，&lt;code&gt;denom&lt;/code&gt;返回分母&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;make-rat&lt;/span&gt; n d) (cons n d))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; x) (car x))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; x) (cdr x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在考虑分子之间互相运算，加减乘除和判断相等分别可以定位为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add-rat&lt;/span&gt; x y)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-rat&lt;/span&gt; (+ (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; y))
                 (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; y) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; x)))
              (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; y))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sub-rat&lt;/span&gt; x y)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-rat&lt;/span&gt; (- (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; y))
                 (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; y) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; x)))
              (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; y))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mul-rat&lt;/span&gt; x y)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-rat&lt;/span&gt; (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; y))
              (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; y))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;div-rat&lt;/span&gt; x y)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-rat&lt;/span&gt; (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; y))
              (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; y)))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal-rat?&lt;/span&gt; x y)
    (= (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; y))
       (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; y) (&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; x))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们现在可以构成、运算分数了，但是现在的分数还不不具备约分化简的能力，于是我们要用到1.2.5节的gcd，也就是查找最大公约数的方法修改make-rat&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;make-rat&lt;/span&gt; n d)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; (gcd n d))
        (cons (/ n g) (&lt;span style=&#34;color:#a6e22e&#34;&gt;/d&lt;/span&gt;  g))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们就完成了有理数数据类型的基本结构了。然后我们来回顾一下这个过程然后思考一些问题。&lt;/p&gt;
&lt;h2 id=&#34;抽象屏障abstraction-barriers&#34;&gt;抽象屏障(Abstraction Barriers)&lt;/h2&gt;
&lt;p&gt;我们可以看到，上述有理数的数据设计是有明显的层次的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://luosuu.github.io/AbsBarr.jpeg&#34; alt=&#34;AbsBarr&#34;&gt;&lt;/p&gt;
&lt;p&gt;上层都无须关注下层的具体实现，例如make-rat不需要关注序对怎么实现的，add-rat也不需要关心make-rat是怎么实现的。&lt;/p&gt;
&lt;p&gt;这种思想的有点基本可以概括为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序容易维护和修改&lt;/li&gt;
&lt;li&gt;可以先扔下底层的具体实现而先构建上层&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一点很好理解，对于第二点，我们可以举个例子&lt;/p&gt;
&lt;p&gt;对于刚才我们实现的三个基本方法，约分的步骤是在构造有理数的方法make-rat里实现的，但是我也可以让有理数就原原本本的保存，在取分子或者分母的时候再约分，如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;make-rat&lt;/span&gt; n d)
    (cons n d))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numer&lt;/span&gt; x)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; (gcd (car x) (cdr x)))
        (/ (car x) g))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;denom&lt;/span&gt; x))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; (gcd (car x) (cdr x)))
        (/ (cdr x) g)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;区别只在于何时运用gcd约分，如果我们需要多次访问有理数的分子和分母，那么我们最好最开始构造有理数的时候就约分，如果情况并非如此，那么我们就可以取分子和取分母的时候再约分。&lt;/p&gt;
&lt;p&gt;而这种区别，对于上层我们如何设计add-rat等方法没有任何影响，我们可以先放下何时取约分这种细节问题，不让他干扰我们整体系统的设计。&lt;/p&gt;
&lt;h2 id=&#34;数据是什么&#34;&gt;数据是什么&lt;/h2&gt;
&lt;p&gt;对于上面的例子，constructor就是make-rat，selector就是numer和denom。而数据就是由constructor和selector所构建的，当然constructor和selector不是随便的几个过程就行的，还要满足一些条件，对于上面有理数的例子，条件就是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;x (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-rat&lt;/span&gt; n d))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal-rat?&lt;/span&gt; x (cons (car x) (cdr x)))=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此我们可以说数据是由满足 &lt;em&gt;使得表达式完整有意义的条件&lt;/em&gt; 的constructor和selector所构建的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Something Magical</title>
      <link>https://luosuu.github.io/post/something-magical/</link>
      <pubDate>Wed, 11 Mar 2020 16:03:03 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/something-magical/</guid>
      <description>&lt;p&gt;Something magical&lt;/p&gt;
&lt;h2 id=&#34;config-file-on-macos&#34;&gt;Config file on macOS&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vim /usr/local/etc/shadowsocks-libev.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc.xyz.com&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;server_port&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8888&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;local_port&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1080&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AbCdEfGhIjKlMn&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chacha20-ietf-poly1305&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp_and_udp&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;plugin&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;obfs-local&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;plugin_opts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;obfs=http;obfs-host=cloudflare.net&amp;#34;&lt;/span&gt;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Restart services&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew services restart shadowsocks-libev 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Jenv Manage JDK</title>
      <link>https://luosuu.github.io/post/jenv-manage-jdk/</link>
      <pubDate>Thu, 05 Mar 2020 19:52:11 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/jenv-manage-jdk/</guid>
      <description>&lt;p&gt;灵活管理JDK&lt;/p&gt;
&lt;h2 id=&#34;whats-jenv&#34;&gt;What&amp;rsquo;s jenv&lt;/h2&gt;
&lt;p&gt;在我安装weka的python包时，需要安装javabridge这个包，于是我先后下载了JDK13和openJDK1.8.0，需要管理JDK的环境（题外话，安装javabridge时需要环境为JDK8或者同等级的openJDk，太新的JDK13不行）&lt;/p&gt;
&lt;p&gt;jenv 是一个命令行工具，可以在 Linux/OS X 平台使用，可以管理多个版本 JDK，方便在多个版本 JDK 之间切换，另外其还可以设置 JAVA_HOME 环境变量。&lt;/p&gt;
&lt;p&gt;使用 jenv 有一个前提，必须提前安装 JDK，其不提供下载安装 JDK 的功能。MacOSX 平台可以提前使用 brew 安装 JDK。&lt;/p&gt;
&lt;h2 id=&#34;install-jenv&#34;&gt;Install jenv&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install jenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;macOS只需brew一行安装即可，其他平台请见下方&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/jenv/jenv.git ~/.jenv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果是bash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;export PATH=&amp;#34;$HOME/.jenv/bin:$PATH&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile   
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eval &amp;#34;$(jenv init -)&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是zsh:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;export PATH=&amp;#34;$HOME/.jenv/bin:$PATH&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc  
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eval &amp;#34;$(jenv init -)&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc
source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;usage&#34;&gt;usage&lt;/h2&gt;
&lt;p&gt;先用下面这行查找出所有已安装的JDK&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/libexec/java_home -V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找到JDK的路径后，使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jenv add &amp;lt;JDK_path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将JDK加入jenv的管理&lt;/p&gt;
&lt;p&gt;有些应用程序需要使用&lt;code&gt;JAVA_HOME&lt;/code&gt;环境变量，可以设置jenv轻松变更该环境变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jenv enable-plugin export
&lt;span style=&#34;color:#75715e&#34;&gt;## 运行这个才会生效&lt;/span&gt;
exec $SHELL -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以用下面这条显示所有jenv管理的版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对当前文件夹更换JDK环境&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jenv local &amp;lt;version_number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对当前shell里的所有操作更换JDK环境&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jenv shell &amp;lt;version_numbers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全局设置JDK环境&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jenv global &amp;lt;version_numbers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对jenv进行检查&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jenv doctor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示所有可行操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jenv commands
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果使用过程中，发现JDK环境没有变(&lt;code&gt;java -version&lt;/code&gt;)，可以运行&lt;code&gt;exec $SHELL -l&lt;/code&gt;尝试，然后看看JDK环境是否变化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pip change source</title>
      <link>https://luosuu.github.io/post/pip-change-source/</link>
      <pubDate>Thu, 05 Mar 2020 19:49:11 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/pip-change-source/</guid>
      <description>&lt;p&gt;TUNA source&lt;/p&gt;
&lt;h2 id=&#34;temporary-using&#34;&gt;temporary using&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install -i https://pypi.tuna.tsinghua.edu.cn/simple &amp;lt;example-package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;default-using&#34;&gt;default using&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U
pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Diary 2019 11 3</title>
      <link>https://luosuu.github.io/post/diary-2019-11-3/</link>
      <pubDate>Thu, 05 Mar 2020 19:27:28 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/diary-2019-11-3/</guid>
      <description>&lt;p&gt;我能跑多快？&lt;/p&gt;
&lt;h2 id=&#34;焦虑没有任何产出&#34;&gt;焦虑没有任何产出&lt;/h2&gt;
&lt;p&gt;找到自己真正喜欢的事情去做，发自内心的想去了解的好奇心才是动力源泉，在发现问题和解决问题的过程中才会得到成长。&lt;/p&gt;
&lt;p&gt;一味的被焦虑驱赶着想要找个方向或者事情给自己做，以求得心安的做法，不能说毫无收获，只能说效率极低，这是我假期时得到的惨痛教训。&lt;/p&gt;
&lt;p&gt;当然世界上应该有很多能逼迫自己做好自己不喜欢做的事情的人，只是我正好做不来这样的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt Windows Navigation</title>
      <link>https://luosuu.github.io/post/qt-windows-navigation/</link>
      <pubDate>Thu, 05 Mar 2020 19:26:15 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/qt-windows-navigation/</guid>
      <description>&lt;p&gt;记录一下上学期写的Qt功能，窗口跳转&lt;/p&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mainwindow.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;QMainWindow&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;QPushButton&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;QPixmap&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;QSize&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;QMouseEvent&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;QMessageBox&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
MainWindow&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MainWindow(QWidget &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;parent)
    &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; QMainWindow(parent)
{
    QMainWindow &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;new_window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QMainWindow; &lt;span style=&#34;color:#75715e&#34;&gt;//创建一个新的窗口，这是我们接下来要跳转的目标。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    QPushButton &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;toNewWindow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QPushButton;&lt;span style=&#34;color:#75715e&#34;&gt;//这是在this窗口里的按钮，我们要通过触发这个按钮跳转到新窗口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    QPushButton &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ReturnthisWindow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QPushButton;
    QPixmap &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;newButtonIcon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QPixmap(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:/SchoolGirls.jpg&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;//创建一个QPixmap类型的对象，用作button的图标，括号里的是资源文件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    QPixmap &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;returnButtonIcon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QPixmap(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:/LeiMuu&amp;#34;&lt;/span&gt;);
    QSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;newButtonIconsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;//括号里是像素的大小
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    QSize &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;reButtonIconsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;);
    QMessageBox &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nihao &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QMessageBox;

    nihao&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;);
    nihao&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setParent(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
    nihao&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;move(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setFixedSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;);
    new_window&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setFixedSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;);

    toNewWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setParent(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;//把按钮设置在this窗口上
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    toNewWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setIcon(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;newButtonIcon);&lt;span style=&#34;color:#75715e&#34;&gt;//把按钮的图标加上
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    toNewWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setIconSize(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;newButtonIconsize);&lt;span style=&#34;color:#75715e&#34;&gt;//调整图标的大小
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    toNewWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setFixedSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;//调整Button的大小
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    toNewWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;move(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;);

    ReturnthisWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setParent(new_window);
    ReturnthisWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setIcon(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;returnButtonIcon);
    ReturnthisWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setIconSize(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;reButtonIconsize);
    ReturnthisWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setFixedSize(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;reButtonIconsize);
    ReturnthisWindow&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;move(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;);

    connect(toNewWindow,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;QPushButton&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;clicked,new_window,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;QMainWindow&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;show);
    connect(toNewWindow,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;QPushButton&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;clicked,&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;QMainWindow&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;hide);

    connect(ReturnthisWindow,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;QPushButton&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;clicked,&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;QMainWindow&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;show);
    connect(ReturnthisWindow,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;QPushButton&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;clicked,new_window,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;QMainWindow&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;hide);


}

MainWindow&lt;span style=&#34;color:#f92672&#34;&gt;::~&lt;/span&gt;MainWindow()
{

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>C Struct Pointer</title>
      <link>https://luosuu.github.io/post/c-struct-pointer/</link>
      <pubDate>Thu, 05 Mar 2020 19:25:41 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/c-struct-pointer/</guid>
      <description>&lt;p&gt;C语言中的结构体指针，曾在第一学期坑过我&lt;/p&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; student
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; chinese;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; math;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; english;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; sum;
}student;

&lt;span style=&#34;color:#75715e&#34;&gt;//就像一个普通的变量一样，直接传指针就可以进行相应的操作，指针存储的是结构体首地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; student&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; student&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; student temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结构体的操作一般都是以指针的方式进行，有的结构体会很大，直接进行拷贝操作代价太高，因此在函数的传参中，结构体一般也是通过指针的形式传经函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pycon2019 Chengdu</title>
      <link>https://luosuu.github.io/post/pycon2019-chengdu/</link>
      <pubDate>Thu, 05 Mar 2020 19:24:46 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/pycon2019-chengdu/</guid>
      <description>&lt;p&gt;这里记录一下我参加pycon2019成都站的笔记和体会。&lt;/p&gt;
&lt;h2 id=&#34;类型推断静态类型jit&#34;&gt;类型推断，静态类型，JIT&lt;/h2&gt;
&lt;p&gt;语法树到语法树的函数 我们称之为&lt;strong&gt;宏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;类型大小本质为将类型看作一个集合，计算集合的大小（取值区间的大小）&lt;/p&gt;
&lt;p&gt;学习路线：&lt;/p&gt;
&lt;p&gt;Python的Virtual Machine&lt;/p&gt;
&lt;p&gt;Stack Machine&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/thautwarm/mapping-high-level-constructs-to-llvm-ir&#34;&gt;LLVM Based Machine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dis模块&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://okmij.org/&#34;&gt;okmij.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编译原理&lt;/p&gt;
&lt;p&gt;Python字节码&lt;/p&gt;
&lt;h2 id=&#34;web-api&#34;&gt;WEB API&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Web Application&lt;/strong&gt;是和用户直接交互的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web API&lt;/strong&gt;返回纯数据格式的（如XML和JSON），与机器（如Web Application，iOS，Android等）进行交互。&lt;/p&gt;
&lt;p&gt;RESTful API指符合REST规范的Web API，虽然几乎没有Web API完全符合REST规范。所以大概符合REST风格的现在都叫RESTful API。REST只是一个架构风格，而非强制要求。&lt;/p&gt;
&lt;p&gt;Flask是一个开发Web API的工具，只提供最基本的功能，有良好的拓展性。选择Flask表示比起Djanro的方便你选择了灵活和更多的可控制性。因此比起&lt;code&gt;Flask+大而全的拓展&lt;/code&gt;更推荐&lt;code&gt;Flask+一组优秀的工具&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;推荐的学习路线&#34;&gt;推荐的学习路线&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;了解Web API设计原则&lt;/li&gt;
&lt;li&gt;学习Flask原生实现&lt;/li&gt;
&lt;li&gt;学习其他搭配工具&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;http://greyli.com/&#34;&gt;李辉的个人网站 greyli.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网站里有很多python web开发的教程和分享。&lt;/p&gt;
&lt;h2 id=&#34;nlp&#34;&gt;NLP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任何时候都不要忘记“当初你想解决的问题”&lt;/li&gt;
&lt;li&gt;把问题转化为具体统计问题或者能够使用机器学习解决的问题（不知道该怎么做时可以用EDA把握数据倾向）&lt;/li&gt;
&lt;li&gt;根据你的时间和预算选择分析方法和合适的模型&lt;/li&gt;
&lt;li&gt;Just Python&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;p&gt;AWS 12要素应用宣言：无需猜测容量，摆脱无差异化工作等&lt;/p&gt;
&lt;p&gt;AWS云基础设施，&lt;code&gt;Infrastructure is Code&lt;/code&gt;，用面向对象的方式描述和构建基础设施。（上一代为&lt;code&gt;Infrastructure as Code&lt;/code&gt;，用JSON等记录和描述基础设施）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nvm Manage Node</title>
      <link>https://luosuu.github.io/post/nvm-manage-node/</link>
      <pubDate>Thu, 05 Mar 2020 19:23:34 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/nvm-manage-node/</guid>
      <description>&lt;p&gt;用nvm管理你的node和npm&lt;/p&gt;
&lt;h2 id=&#34;awesome-nvm&#34;&gt;awesome nvm&lt;/h2&gt;
&lt;p&gt;前端开发经常必然需要很好的管理自己的npm和node。奈何mac上的homebrew不给力，经常有很多问题。&lt;/p&gt;
&lt;p&gt;通过查询知道还有nvm这样一种方便的工具可以使用。便立即学习了一下。&lt;/p&gt;
&lt;p&gt;首先需要安装nvm。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后你可以直接运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nvm install node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来直接安装最新的node。&lt;/p&gt;
&lt;p&gt;也可以使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nvm ls-remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看看所有可用的版本。&lt;/p&gt;
&lt;p&gt;如果你有多个node版本。可以仿照下面的代码交换使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nvm use v12.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nvm use node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就切换到最新版了。&lt;/p&gt;
&lt;p&gt;其他用法可以看官方文档。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ssh Login Server</title>
      <link>https://luosuu.github.io/post/ssh-login-server/</link>
      <pubDate>Thu, 05 Mar 2020 19:22:52 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/ssh-login-server/</guid>
      <description>&lt;p&gt;用ssh密钥文件登陆服务器&lt;/p&gt;
&lt;h2 id=&#34;用腾讯云自己生成的密钥文件&#34;&gt;用腾讯云自己生成的密钥文件&lt;/h2&gt;
&lt;p&gt;如果你购买了一个服务器，那么你肯定是需要远程登陆它的。&lt;/p&gt;
&lt;p&gt;ssh密钥登陆就是受推崇的一种方式。它在安全性和便捷性间作出了非常好的折中。&lt;/p&gt;
&lt;p&gt;以腾讯云为例。你在购买腾讯云的服务器后，如果你想登陆服务器，那么就需要开放ssh端口。&lt;/p&gt;
&lt;p&gt;你可以通过它自带的方式生成一个密钥文件。腾讯云会为你保存名称和公钥，私钥文件需要自己下载保存。&lt;/p&gt;
&lt;p&gt;你下载下来的密钥文件的文件名应该是和你所起的名称是一致的。&lt;/p&gt;
&lt;p&gt;你可以直接使用这个密钥文件。&lt;/p&gt;
&lt;p&gt;使用之前你可能需要先更改这个文件的权限&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; &amp;lt;文件路径&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改以后你就可以直接使用以下命令来登陆服务器了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh -i &amp;lt;文件路径&amp;gt; &amp;lt;服务器用户名&amp;gt;@&amp;lt;公网ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，如果你使用以上方法，那么你的文件名不能改，改了就不行了。&lt;/p&gt;
&lt;h2 id=&#34;更通常的做法&#34;&gt;更通常的做法&lt;/h2&gt;
&lt;p&gt;然而这个方式不优雅，也不是我们推崇的。&lt;/p&gt;
&lt;p&gt;一般操作系统都会自带&lt;code&gt;~/.ssh&lt;/code&gt;文件夹，如果没有，你可以自己创建一个。&lt;/p&gt;
&lt;p&gt;进去后应该会有两个文件，一个是&lt;code&gt;id_rsa&lt;/code&gt;，另外一个是&lt;code&gt;id_rsa.pub&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这是我们电脑默认的ssh加密文件。如果你曾经使用过git，那么不应该对他们很陌生。&lt;/p&gt;
&lt;p&gt;这两个文件各有用处，&lt;code&gt;id_rsa&lt;/code&gt;负责储存私钥，&lt;code&gt;id_rsa.pub&lt;/code&gt;负责储存公钥。&lt;/p&gt;
&lt;p&gt;如果你想使用腾讯云给你生成的密钥文件的内容。那么你可以将你之前下载的密钥文件重命名为&lt;code&gt;id_rsa&lt;/code&gt;然后覆盖掉默认的。&lt;/p&gt;
&lt;p&gt;然后去腾讯云将公钥复制下来，创建一个&lt;code&gt;id_rsa.pub&lt;/code&gt;的文件，将公钥内容复制进去。然后用你创建的&lt;code&gt;id_rsa.pub&lt;/code&gt;文件覆盖掉默认的。&lt;/p&gt;
&lt;p&gt;然后你可能需要更改文件权限&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样你就可以使用以下命令登陆服务器了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh &amp;lt;服务器用户名&amp;gt;@&amp;lt;公网ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你不想用腾讯云给你的密钥文件内容。我假设你之前没有密钥文件（因为有密钥文件的操作是包含在没有密钥文件的操作之中的）。&lt;/p&gt;
&lt;p&gt;在shell中输入以下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这是在生成密钥对&lt;/span&gt;
ssh-keygen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后会出现以下提示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Generating public/private rsa key pair.
Enter file in which to save the key ～/.ssh/id_rsa&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是让你在选择ssh密钥内容的保存位置。而这个文件位置一般就是&lt;code&gt;~/.ssh/id_rsa&lt;/code&gt;，也就是我们期望的默认位置。直接回车。&lt;/p&gt;
&lt;p&gt;然后会出现以下提示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Enter passphrase &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;empty &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; no passphrase&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
Enter same passphrase again:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后会让你输入两次一个叫做&lt;code&gt;passphrase&lt;/code&gt;的东西，你可以理解是对密钥文件的加密，也就是密钥文件的密码。一般来说直接回车两次就行了，这代表不设置&lt;code&gt;passphrase&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后登陆服务器。进入服务器的&lt;code&gt;~/.ssh&lt;/code&gt;目录，使用&lt;code&gt;ls&lt;/code&gt;命令查看其中的文件。里面应该有一个叫做&lt;code&gt;authorized_keys&lt;/code&gt;的文件。这个文件里面存有所有得到登陆授权的公钥。储存格式是每行一个公钥。&lt;/p&gt;
&lt;p&gt;我们可以编辑&lt;code&gt;authorized_keys&lt;/code&gt;，然后将自己生成的公钥内容复制进去（记得保存）。&lt;/p&gt;
&lt;p&gt;然后我们就可以通过本地的ssh密钥对登陆了。&lt;/p&gt;
&lt;p&gt;从这里我们可以看出ssh密钥对的优势和好处。我们可以在服务器的&lt;code&gt;authorized_keys&lt;/code&gt;储存多台电脑的ssh文件的公钥，就可以实现服务器的安全共享。&lt;/p&gt;
&lt;h2 id=&#34;ssh文件的使用&#34;&gt;ssh文件的使用&lt;/h2&gt;
&lt;p&gt;为了方便，我们每个计算机都只保存一个ssh文件密钥对，也就是&lt;code&gt;id_rsa&lt;/code&gt;与&lt;code&gt;id_rsa.pub&lt;/code&gt;。然后任何需要使用ssh文件的地方都用这个密钥对。这样我们就免去了命令上的麻烦。&lt;/p&gt;
&lt;p&gt;ssh命令中的&lt;code&gt;-i&lt;/code&gt;实际上就是使用密钥文件的意思。以后我们登陆任何需要ssh文件的服务器，都直接使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh &amp;lt;服务器用户名&amp;gt;@&amp;lt;公网ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以了。非常方便。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Smart Contrast Dev</title>
      <link>https://luosuu.github.io/post/smart-contrast-dev/</link>
      <pubDate>Thu, 05 Mar 2020 19:21:47 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/smart-contrast-dev/</guid>
      <description>&lt;p&gt;本文主要参考于&lt;a href=&#34;https://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html&#34;&gt;Solidity develop文档&lt;/a&gt;。作为本人的学习笔记和再理解。&lt;/p&gt;
&lt;h2 id=&#34;对solidity的初步了解&#34;&gt;对solidity的初步了解&lt;/h2&gt;
&lt;p&gt;Solidity是针对以太坊的编程语言，受到C++，Python，JavaScript等语言的影响。它的设计目的就是为了在以太坊上运行。&lt;/p&gt;
&lt;p&gt;它是一种静态语言。solidity支持一部分类的特性。solidity同样支持继承，和复杂的由用户自定义的特殊类型。因此我们可以说solidity是一种OOP（面对对象）的语言。我们在编写solidity代码时，应该以面对对象的编程方式定义变量（状态）和函数。并在solidity中，是大小写敏感的。&lt;/p&gt;
&lt;p&gt;我们知道以太坊上的每个节点实际上一般都是EVM，就算是矿工节点，一般也承担EVM的职责。以太坊区块链通过编写和执行智能合约来帮助拓展它的功能。EVM支持的语言很多，solidity是其中最流行也是最适合的。&lt;/p&gt;
&lt;h2 id=&#34;evm和solidity&#34;&gt;EVM和solidity&lt;/h2&gt;
&lt;p&gt;EVM是最终执行智能合约代码的地方，但是它不能直接理解solidity里面的高级的结构。EVM能理解的是一种被称为&lt;strong&gt;字节码&lt;/strong&gt;的一种低级指令。这种指令非常精简。深入了解EVM，你会发现EVM在实际运行代码时不能联网，权限也非常有限。包括使用精简的指令在内的这些特性，都是为了保证EVM的安全性。&lt;/p&gt;
&lt;p&gt;要把我们编写的solidity代码转换成字节码，需要编译器。solidity附带的编译器成为solidity编译器或者&lt;strong&gt;solc&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么这个工作流程就和普通的编译代码并运行它没有什么太大的区别了。&lt;/p&gt;
&lt;p&gt;solidity代码 -&amp;gt; solc -&amp;gt; 字节码 -&amp;gt; 部署并在EVM上运行。&lt;/p&gt;
&lt;h2 id=&#34;solidity文件&#34;&gt;solidity文件&lt;/h2&gt;
&lt;p&gt;储存solidity代码的solidity文件的拓展名是&lt;code&gt;.sol&lt;/code&gt;。solidity文件是人类可读的文件，可以在任何编辑器，甚至可以在记事本里打开。&lt;/p&gt;
&lt;p&gt;solidity文件由以下四个高级结构组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预编译指令 - pragma&lt;/li&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;li&gt;导入(import)&lt;/li&gt;
&lt;li&gt;合约/库/接口 - contract/library/interface&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中solidity的注释是和C++是一样的，&lt;code&gt;\\&lt;/code&gt;是单行注释，&lt;code&gt;\* *\&lt;/code&gt;是多行注释。&lt;/p&gt;
&lt;p&gt;它们整体看起来像是这个样子的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pragma solidity&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;contract&lt;/span&gt; a{
    &lt;span style=&#34;color:#75715e&#34;&gt;//***
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;library&lt;/span&gt; b{
    &lt;span style=&#34;color:#75715e&#34;&gt;//***
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; c{
    &lt;span style=&#34;color:#75715e&#34;&gt;//***
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;import语句&#34;&gt;import语句&lt;/h3&gt;
&lt;p&gt;帮助我们导入其他solidity文件，使得当前的solidity文件可以访问其中的代码。这有助于我们编写模块化的代码。如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;commonLibrary.sol&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;预编译指令&#34;&gt;预编译指令&lt;/h3&gt;
&lt;p&gt;通常指solidity文件的第一行代码，其形式一般为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pragma solidity&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;version number&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意是有分号作为结束的。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;pragma&lt;/code&gt;指令的帮助下，你可以为你的代码选择合适的编译器。这是一种很好的习惯。&lt;/p&gt;
&lt;p&gt;其中版本号&lt;code&gt;^0.4.0&lt;/code&gt;代表版本号为4的最新的版本。&lt;/p&gt;
&lt;h2 id=&#34;hello-world&#34;&gt;Hello world&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pragma solidity&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;contract&lt;/span&gt; Helloworld{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetHelloWorld() &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是用solidity输出&amp;quot;Hello world&amp;quot;的一个范例。我们可以从中简单的窥见solidity声明变量和函数的一些特点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pragma&lt;/code&gt;关键字代表着编译器应该如何处理源代码，常见的就是声明使用的编译器版本。 我们可以窥见我们写的所谓合约&lt;code&gt;contract&lt;/code&gt;其实在写一个很类似于C++类的东西，在其中声明了该合约的成员和成员函数，或公有供别人调用，或私有进行保护。&lt;/p&gt;
&lt;p&gt;我们写了这个合约，就可以进行发布，将它写在区块上，使其拥有一个特定的地址，这样别人就可以通过这个地址使用我们写的合约了。&lt;/p&gt;
&lt;h2 id=&#34;存储&#34;&gt;存储&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pragma solidity&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;contract&lt;/span&gt; SimpleStorage {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; storedData;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; set(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; {
        storedData &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; get() &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; storedData;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;unit&lt;/code&gt;这个变量类型是最高256位的无符号整数，我们在上述代码里声明了一个&lt;code&gt;unit&lt;/code&gt;类型的状态变量，叫做&lt;code&gt;storedDate&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;后面我们声明了两个函数&lt;code&gt;set&lt;/code&gt;与&lt;code&gt;get&lt;/code&gt;，用于设定和返回合约&lt;code&gt;SimpleStorage&lt;/code&gt;的成员&lt;code&gt;storedDate&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在solidity中，我们不需要&lt;code&gt;this.&lt;/code&gt;来访问合约内部的变量。&lt;/p&gt;
&lt;h2 id=&#34;一个简单的货币实现&#34;&gt;一个简单的货币实现&lt;/h2&gt;
&lt;p&gt;实际上，public关键字会让编译器自动生成函数，用于返回public变量或函数，理解这一点尤其重要。我们将分析下面这个最简单的加密货币：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pragma solidity&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;contract&lt;/span&gt; Coin {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 关键字“public”让这些变量可以从外部读取
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; minter;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;mapping&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; balances;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 轻客户端可以通过事件针对变化作出高效的反应
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; Sent(&lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; to, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; amount);

    &lt;span style=&#34;color:#75715e&#34;&gt;// 这是构造函数，只有当合约创建时运行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Coin() &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; {
        minter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg.sender;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; mint(&lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; receiver, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; amount) &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (msg.sender &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; minter) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
        balances[receiver] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; amount;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; send(&lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; receiver, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; amount) &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (balances[msg.sender] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; amount) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
        balances[msg.sender] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; amount;
        balances[receiver] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; amount;
        emit Sent(msg.sender, receiver, amount);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们在这里遇到了新的变量类型，&lt;code&gt;address&lt;/code&gt;。 &lt;code&gt;address&lt;/code&gt;类型是一个160位的值，如果你知道在以太坊中，用户之间是通过每个用户的公钥的前160位来区别，那么将很好理解。代码里我们声明了一个叫做&lt;code&gt;minter&lt;/code&gt;的&lt;code&gt;address&lt;/code&gt;的公有变量。 &lt;code&gt;public&lt;/code&gt;关键字对于&lt;code&gt;minter&lt;/code&gt;来讲，编译器自动生成的代码大致如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; minter() &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; minter; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译器通过这种方式，使&lt;code&gt;minter&lt;/code&gt;可以被其他合约访问。&lt;/p&gt;
&lt;p&gt;下一行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mapping&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; balances;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们声明了一个叫做&lt;code&gt;balances&lt;/code&gt;的公有变量，那么它的类型怎么理解呢？我们可以将它理解为一个转换器，也就是对于&lt;code&gt;balances(address _account)&lt;/code&gt;，它返回的是一个&lt;code&gt;unit&lt;/code&gt;类型，并且每个&lt;code&gt;_account&lt;/code&gt;都有互相独立的空间，你可以理解每个&lt;code&gt;_account&lt;/code&gt;可以通过&lt;code&gt;balances&lt;/code&gt;拥有一个自己成员/属性，就是自己的一个&lt;code&gt;unit&lt;/code&gt;类型的值。通过&lt;code&gt;balances&lt;/code&gt;我们实现了使每一个地址的用户都有储存自己余额的地方，我们也可以通过&lt;code&gt;balances&lt;/code&gt;管理每个用户的余额从而实现货币的流通（实际上在以太坊里，&lt;code&gt;balances&lt;/code&gt;就代表余额的意思）。我们一般可以称类似于&lt;code&gt;balances&lt;/code&gt;这种变量为&lt;strong&gt;状态变量&lt;/strong&gt;。 &lt;code&gt;public&lt;/code&gt;关键字对&lt;code&gt;balances&lt;/code&gt;生成的代码大致如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; balances(&lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; _account) &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; balances[_account];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到通过&lt;code&gt;balances&lt;/code&gt;轻松的查询到每一位用户的余额。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; Sent(&lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;address&lt;/span&gt; to, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; amount);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;event&lt;/code&gt;变量，即“事件”。这种变量类型是用来被传输信息的，也就是说可以被传送出去，并且携带一些我们希望它携带的信息。而用来监听这个事件并且获得信息的代码示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;Coin.Sent().watch({}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(error, result) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;error) {
        console.log(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Coin transfer: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; result.args.amount &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; coins were sent from &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; result.args.&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; to &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; result.args.to &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);
        console.log(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Balances now:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sender: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Coin.balances.call(result.args.&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Receiver: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Coin.balances.call(result.args.to));
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用户可以通过在自己的应用程序或者服务器上添加上面这个代码来获取事件的信息。这是&lt;code&gt;event&lt;/code&gt;类型数据所允许的一种方式。&lt;/p&gt;
&lt;p&gt;请一定要注意&lt;code&gt;balances&lt;/code&gt;函数是如何在用户界面调用的。不再是通过&lt;code&gt;balances(_address)&lt;/code&gt;这种形式，而是通过&lt;code&gt;balances.call(_address)&lt;/code&gt;这种形式调用。&lt;/p&gt;
&lt;p&gt;然后我们看到了构造函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Coin() &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; {
        minter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; msg.sender;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构造函数&lt;code&gt;Coin()&lt;/code&gt;只会在合约创建的时候被调用，存入合约创建者的地址。&lt;code&gt;msg&lt;/code&gt;是一个全局变量，其中&lt;code&gt;msg.sender&lt;/code&gt;始终是当前函数调用的来源地址。这样就可以理解函数的内容了。&lt;/p&gt;
&lt;p&gt;函数&lt;code&gt;mint&lt;/code&gt;和&lt;code&gt;send&lt;/code&gt;是完成合约功能的两个函数。&lt;/p&gt;
&lt;p&gt;函数&lt;code&gt;mint&lt;/code&gt;会先检验调用者是不是合约创建者，如果不是，那么就什么都不会发生，直接返回。而如果调用者就是合约创建者，就会执行内容，也就是给指定的接受地址的用户增加余额。&lt;/p&gt;
&lt;p&gt;函数&lt;code&gt;send&lt;/code&gt;允许任何人调用，用于将自己的货币的余额的一部分转移到指定接受账户的余额里。并且送出事件&lt;code&gt;Sent&lt;/code&gt;用于告知所有用户。后面就是用户更新自己账本了。具体流程可以看我的其他文档。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Basic Eth</title>
      <link>https://luosuu.github.io/post/basic-eth/</link>
      <pubDate>Thu, 05 Mar 2020 19:19:47 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/basic-eth/</guid>
      <description>&lt;p&gt;一些以太坊基础知识&lt;/p&gt;
&lt;h2 id=&#34;区块是怎么连接的&#34;&gt;区块是怎么连接的&lt;/h2&gt;
&lt;p&gt;在区块链和以太坊中，每个区块都连接着另外一个区块，区块依次相连，形成一条长链。其中第一个区块成为&lt;strong&gt;创世区块&lt;/strong&gt;。创世区块通过&lt;code&gt;genesis.json&lt;/code&gt;文件产生。&lt;/p&gt;
&lt;p&gt;区块链中，两个相邻的区块之间是父子的关系，并且是一对一的关系（每个子都只有一个父）。那么如何确认这种关系并且将他们连接在一起呢？&lt;/p&gt;
&lt;p&gt;每个区块都由两个部分组成，区块头和区块体。其中区块头存储着当前区块的特征值，它包含了很多属性，如生成该区块的时间，本区块的区块体的散列，上一个区块的散列…&lt;/p&gt;
&lt;p&gt;通过上一个区块的散列这一属性，我们就将区块连接在一起了，并且可以互相认证。&lt;/p&gt;
&lt;p&gt;由于散列的特殊性，如果区块体的内容改变，那么她的散列一定会改变，那么就会连锁性质的导致它的子块，和子块下面的所有块都要改变。&lt;/p&gt;
&lt;p&gt;而快速改变多个区块是几乎不可能的，这要求它占据全网51%的算力。这样的方式保证了区块链的不可篡改性质。&lt;/p&gt;
&lt;h2 id=&#34;区块体的散列值的产生-merkle根数&#34;&gt;区块体的散列值的产生-Merkle根数&lt;/h2&gt;
&lt;p&gt;区块头的哈希值是怎么产生的？答案是&lt;strong&gt;Merkle根树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Merkle根叔，又称哈希二叉树(Merkle tree)。&lt;/p&gt;
&lt;p&gt;每个被储存在区块里的交易都会产生一个散列值，每个交易都有自己的时间戳，在区块里他们会按时间顺序排序，然后挖矿程序会按照顺序将它们两个一组两个一组的分组。&lt;/p&gt;
&lt;p&gt;如果恰巧交易ID的总共数量为奇数个呢？那么排在最后的这个交易ID就copy自己一份，凑成偶数。&lt;/p&gt;
&lt;p&gt;每个组的两个成员的哈希值相连接成为一个长字符串，然后在对其产生哈希，然后不断重复分组-相连-产生哈希的过程，最终生成最后的一个哈希值，这就是&lt;strong&gt;Merkle根哈希值(Merkle root)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Merkle tree大部分都是二叉的，但是也有别的形式的，三叉及以上也是有可能的。&lt;/p&gt;
&lt;h3 id=&#34;merkle-tree有什么用&#34;&gt;Merkle tree有什么用&lt;/h3&gt;
&lt;p&gt;在说这个之前，我们要提一句另外一种产生一系列内容的哈希值的方式，Hash List。&lt;/p&gt;
&lt;p&gt;Hash List非常简单，就是对每一项内容都产生一个哈希，把这些哈希放进一个列表里，也就是Hash List，然后把这些哈希全都连接在一起，在对其产生一个哈希，用来检验Hash List。&lt;/p&gt;
&lt;p&gt;通过Merkle tree这种方式产生哈希，在P2P网络下载整个网络之前，我们可以先从可信源获得Merkle root，然后从其他不可信源下载Merkle tree，对比二者的Merkle root，由于哈希值的唯一性，我们可以认为如果Merkle root一致，那么整个Merkle tree都是正确的。在获得整棵树后，我们就可以单独对树上的某只分支进行验证了。&lt;/p&gt;
&lt;p&gt;从网络上下载，需要先进行验证保证内容的正确可信，这也是Merkle tree和Hash List的意义之一。验证通过后才能进行下载。&lt;/p&gt;
&lt;p&gt;Merkle tree和Hash List的主要区别在于，如果一部分内容损坏，Merkle tree的方式允许我们只下载这一部分数据所在的分支，然后验证这一个分支，验证通过后我们就可以开始下载内容了。Hash List则要求我们下载完整的Hash List才能验证。&lt;/p&gt;
&lt;h2 id=&#34;什么是gas&#34;&gt;什么是gas&lt;/h2&gt;
&lt;p&gt;gas，译为“燃料”。以太坊作为平台，对用户的每一项操作都要收取手续费，而衡量应该收取手续费的多少的计量单位就是gas。&lt;/p&gt;
&lt;p&gt;但是我们知道区块链技术是去中心的，这个手续费交给的不是平台，当然是为你做出计算劳动的矿工（尽管你支付给的对象的确是网络，但是网络会直接按照劳动量分配给矿工）。而平台只是表明多少计算量需要多少的gas。需要越多计算资源的操作自然需要的gas越多。&lt;/p&gt;
&lt;p&gt;但是gas是没有任何实际的标记（token）的，也就是说你不能拥有1000个gas之类的，gas只存在与以太坊虚拟机的内部，计算你所需的操作消耗的gas数量。以太坊会直接计算你的操作需要多少计算资源，然后将他们换算成gas。在你支付的时候，它们在换算成ether（以太坊内置机制中矿工生成区块记录内容的奖励）。&lt;/p&gt;
&lt;h2 id=&#34;为什么需要gas&#34;&gt;为什么需要gas&lt;/h2&gt;
&lt;p&gt;以太坊直接有ether作为货币，为什么不直接以ether交易呢？这是由于以太坊在交易所进行公开买卖，它的价格会飘忽不定，这样你在以太坊内的操作的价格就会可能剧烈波动，在以太币的价格较低时如果人们交易量很大，那么可能就会形成“峰谷效应”，也就是执行量过大，造成平台超负荷运行。而gas可以缓解这一过程。等量计算资源消耗的操作所需要的gas数量是不变的，是事先确定的。&lt;/p&gt;
&lt;h2 id=&#34;如何支付gas&#34;&gt;如何支付gas&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;你最终的成本 = gas数量*gas单价
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我每进行一个操作，都需要提前标注好自己的gas单价，然后附加上实际的以太币。你的gas单价会决定你在队列中的优先度，大家当然愿意先服务单价高的客户。接下来的情况就和你附加的以太币的数量有关了。&lt;/p&gt;
&lt;p&gt;矿工们每付出一些计算资源他们就会得到奖励，他们不会预先知道你附加的以太币是否足够支付整个操作，所以你的以太币是一点点被消耗的。矿工们的付出和获得是需要持久的，当停止支付时他们就会停止工作。所以如果你进行的&lt;code&gt;操作需要的gas数量*你标记的gas单价 &amp;gt; 你附加的以太币&lt;/code&gt;，当你的以太币消耗完了之后，他们就会停止工作。然后他们会还原之前的处理，但是仍然会把这项交易失败的记录写入区块里，作为收取你费用的记录。而你会被提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;您的交易中出现的gas与您的交易之间存在差异，没有足够高的费用来支持交易（out of gas）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可能会觉得这个设计很坑，操作失败了竟然不给我退款，但是这是为了整个系统的稳定，矿工们付出了劳动，理应得到奖励。这要求每一个请求操作的人都谨慎的处理自己的代码，并且保证了系统的安全性，对整个系统来说是有益的。&lt;/p&gt;
&lt;p&gt;而如果你支付的以太币足够多，当请求的操作结束之后，会退还给你附加的多余的以太币。&lt;/p&gt;
&lt;h2 id=&#34;gas的限制&#34;&gt;gas的限制&lt;/h2&gt;
&lt;p&gt;我们知道交易储存在区块中。在以太坊里，每个区块都有gas上限。待执行的交易要消耗的gas不能超过这个上限，这样就避免了所有区块都储存在最后一个区块里，达到gas上限后，其他交易就不能写入这个区块了，就会逼迫矿工挖矿，挖出下一个节点。这样可以保证整个系统的区块不断延长，保证整个系统的安全性。&lt;/p&gt;
&lt;h2 id=&#34;各种系统安装geth的办法&#34;&gt;各种系统安装Geth的办法&lt;/h2&gt;
&lt;h2 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install software-properties-common
sudo add-apt-repository -y ppa:ethereum/ethereum
sudo apt-get update
sudo apt-get install ethereum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;禁用了ppa源的linux发行版&#34;&gt;禁用了PPA源的Linux发行版&lt;/h2&gt;
&lt;p&gt;可以考虑编译安装。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/ethereum/go-ethereum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装Go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt install golang
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y build-essential
cd go-ethereum
make geth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在最后的运行结果里你就可以知道你启动geth的路径，你可以把它加在你的环境变量里方便你使用。&lt;/p&gt;
&lt;h2 id=&#34;如何方便地启动geth&#34;&gt;如何方便地启动geth&lt;/h2&gt;
&lt;p&gt;在你安装完geth后，会告诉你geth的安装路径，在shell中直接输入该路径，geth就启动了。&lt;/p&gt;
&lt;p&gt;但是我们想在shell中输入geth就能直接启动，而不是每次都要输入长长的路径。&lt;/p&gt;
&lt;p&gt;这里介绍一种办法。这个办法就是在用户目录下创建一个叫做&lt;code&gt;bin&lt;/code&gt;文件夹，然后将其中储存一个软链接，链接到geth的路径。然后在&lt;code&gt;.zshrc&lt;/code&gt;中添加环境变量，将咱们刚刚创建的&lt;code&gt;bin&lt;/code&gt;文件夹添加进去。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 进入用户家目录，也就是～&lt;/span&gt;
cd
&lt;span style=&#34;color:#75715e&#34;&gt;# 创建文件夹&lt;/span&gt;
mkdir bin
&lt;span style=&#34;color:#75715e&#34;&gt;# 创建软链接&lt;/span&gt;
ln -s &amp;lt;geth路径&amp;gt; ～/bin/geth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此我们成功地将软链接添加好了。&lt;/p&gt;
&lt;p&gt;然后我们添加环境变量。我们应该编辑&lt;code&gt;.zshrc&lt;/code&gt;文件。在最后添加如下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;export PATH &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $PATH:~/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;export是添加环境变量的语句，并且是一次性的。由于我们将它写入的&lt;code&gt;.zshrc&lt;/code&gt;中，也就是zsh的配置文件，每次我们启动shell的时候都会随zsh的启动而实施。&lt;/p&gt;
&lt;p&gt;以上的方法是受推崇的，这样的做法十分安全，避免了sudo。并且保证了每个用户的独立性，也就是每个用户自己软件的不可见性。&lt;/p&gt;
&lt;p&gt;如果是个人用户，可以不这么麻烦。可以直接放在&lt;code&gt;/usr/local/bin&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo ln -s &amp;lt;geth路径&amp;gt; /usr/local/bin/geth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样需要sudo，并且如果是在服务器端，那么所有服务器用户都可以使用。&lt;/p&gt;
&lt;h2 id=&#34;geth搭建私链&#34;&gt;Geth搭建私链&lt;/h2&gt;
&lt;h2 id=&#34;创建目录&#34;&gt;创建目录&lt;/h2&gt;
&lt;p&gt;首先我们需要创建一个我们用于储存私链数据的文件夹，geth客户端工作的时候导入数据就要从其中导入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir private-geth
cd private-geth
touch gensis.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创世区块&#34;&gt;创世区块&lt;/h2&gt;
&lt;p&gt;我们新建的&lt;code&gt;gensis.json&lt;/code&gt;文件是创世区块的配置文件。&lt;/p&gt;
&lt;p&gt;这个文件会保证没有其他节点和你的节点的区块链版本一致，除非他们的创世区块的配置文件和你一模一样。&lt;/p&gt;
&lt;p&gt;每条链都应该有创世区块，也自然应该有自己的&lt;code&gt;gensis.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下是一个例子，你需要在了解其中的各项参数的意义后自己更改一下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;:{
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;chainId&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;,
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;homesteadBlock&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;eip155Block&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;eip158Block&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
},
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;alloc&amp;#34;&lt;/span&gt;      :{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;0xeb680f30715f347d4eb5cd03ac5eced297ac5046&amp;#34;&lt;/span&gt;:{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10000000000000000&amp;#34;&lt;/span&gt;}},
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;coinbase&amp;#34;&lt;/span&gt;   : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0000000000000000000000000000000000000000&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;difficulty&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x20000&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;extraData&amp;#34;&lt;/span&gt;  : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gasLimit&amp;#34;&lt;/span&gt;   : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0xffffffff&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nonce&amp;#34;&lt;/span&gt;      : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0000000000000039&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mixhash&amp;#34;&lt;/span&gt;    : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;parentHash&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;  : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x00&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;alloc&lt;/code&gt;代表初始账号，并且分配给他一定的余额。&lt;/p&gt;
&lt;p&gt;建议这里设置一个初始账号，方便我们以后的操作。账号可以自己随便写，只要格式正确，长度正确就可以，因为我们不会实际使用这个账号。&lt;/p&gt;
&lt;h2 id=&#34;初始化&#34;&gt;初始化&lt;/h2&gt;
&lt;p&gt;然后我们需要使用创世区块的配置文件初始化我们的私链。首先我们需要一个储存链数据的位置。&lt;/p&gt;
&lt;p&gt;我们推荐在我们刚才创建的文件夹里在创建一个文件夹。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 名字不重要&lt;/span&gt;
mkdir db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们需要执行初始化命令，进入我们最开始创建的文件夹里。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;geth --datadir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./db&amp;#34;&lt;/span&gt; init gensis.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;--datadir &amp;quot;./db&amp;quot;&lt;/code&gt;代表指定存储位置，后面的代表将&lt;code&gt;gensis.json&lt;/code&gt;作为初始化配置文件。&lt;/p&gt;
&lt;p&gt;然后你可以进去使用ls命令看看里面都有些什么。&lt;/p&gt;
&lt;h2 id=&#34;启动节点&#34;&gt;启动节点&lt;/h2&gt;
&lt;p&gt;进入我们最开始创建的文件夹，使用以下命令启动节点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;geth --datadir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./db&amp;#34;&lt;/span&gt; --rpc --rpcaddr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0.0.0 --rpcport &lt;span style=&#34;color:#ae81ff&#34;&gt;8545&lt;/span&gt; --rpccorsdomain &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; --rpcapi &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eth,net,web3,personal,admin,shh,txpool,debug,miner&amp;#34;&lt;/span&gt; --nodiscover --maxpeers &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; --networkid &lt;span style=&#34;color:#ae81ff&#34;&gt;3909&lt;/span&gt; --port &lt;span style=&#34;color:#ae81ff&#34;&gt;30303&lt;/span&gt; --mine --minerthreads &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --etherbase &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0xeb680f30715f347d4eb5cd03ac5eced297ac5046&amp;#34;&lt;/span&gt; --allow-insecure-unlock console
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;--allow-insecure-unlock&lt;/code&gt;我推荐加上去，否则会在后面的解锁账户时遇到麻烦，&lt;strong&gt;现在不允许以默认的方式解锁带http接口的账户了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-rpc&lt;/code&gt;就是开启了HTTP-RPC服务。&lt;/p&gt;
&lt;p&gt;启动节点后他就会开始挖矿。挖矿账户就是我们在&lt;code&gt;gensis.json&lt;/code&gt;里设置的账户。&lt;/p&gt;
&lt;p&gt;最后我们如果想进一步操作，需要进入Geth的JavaScript控制台。&lt;/p&gt;
&lt;p&gt;我们需要通过attach命令，连接一个已经启动的节点，这里推荐新开一个终端窗口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;geth --datadir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./db&amp;#39;&lt;/span&gt; attach ipc:./db/geth.ipc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;以太坊javascript控制台命令&#34;&gt;以太坊JavaScript控制台命令&lt;/h2&gt;
&lt;p&gt;以太坊JavaScript控制台中内置了一些对象，方便我们和以太坊交互，其中有eth, net, admin, miner, personal, txpool, web3。&lt;/p&gt;
&lt;h3 id=&#34;新建账号&#34;&gt;新建账号&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;personal&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newAccount&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;括号里的字符串是你新建账号的密码。显示出的结果就是账号的公钥。&lt;/p&gt;
&lt;p&gt;生成的账户会保存在keystore文件夹。&lt;/p&gt;
&lt;p&gt;你可以新建两个账号，用于接下来我们尝试进行交易。&lt;/p&gt;
&lt;p&gt;新建完账号后，可以使用如下命令来查看当前链的账户。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;accounts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果就是当前链的所有账户了。他们以数组的形式储存，所以可以用诸如&lt;code&gt;eth.accounts[0]&lt;/code&gt;的形式调用它们。&lt;/p&gt;
&lt;p&gt;然后我们可以看看他们的余额。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JS&#34; data-lang=&#34;JS&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;balance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;web3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromWei&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getBalance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;accounts&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ether&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;eth.getBlance&lt;/code&gt;返回的是以wei为单位的余额，上面的命令，将wei单位转化为了ether单位。&lt;/p&gt;
&lt;p&gt;新建的两个账户的余额自然是0，想要实现交易至少得先有以太币，所以我们需要用一个账户挖矿，获得奖励。&lt;/p&gt;
&lt;h3 id=&#34;挖矿&#34;&gt;挖矿&lt;/h3&gt;
&lt;p&gt;首先设立本机挖矿奖励地址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JS&#34; data-lang=&#34;JS&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;miner&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setEtherbase&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;accounts&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后检查一下是否设置成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JS&#34; data-lang=&#34;JS&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;coinbase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这条命令就会返回挖矿的奖励地址。&lt;/p&gt;
&lt;p&gt;然后启动挖矿。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JS&#34; data-lang=&#34;JS&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;miner&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;括号里的数字代表线程数，代表开启几个线程进行挖矿。&lt;/p&gt;
&lt;p&gt;你可能遇到返回是&lt;code&gt;null&lt;/code&gt;的情况，你可以检查下区块高度&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JS&#34; data-lang=&#34;JS&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;blockNumber&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会返回一个数字，代表着现在的区块高度，你隔段时间检查一下，如果区块高度增高了，说明它已经开始挖矿了，没有问题。&lt;/p&gt;
&lt;p&gt;据我粗略观察，应该是咱们开了一个新的窗口，挖矿的具体信息都在原先的窗口里，如果你担心区块高度的增加是因为原先的挖矿没有停止，你可以先用&lt;code&gt;miner.stop()&lt;/code&gt;，再用&lt;code&gt;miner.start(1)&lt;/code&gt;,然后检查区块高度是否增加&lt;/p&gt;
&lt;h3 id=&#34;交易&#34;&gt;交易&lt;/h3&gt;
&lt;p&gt;进行一段时间的挖矿后，你说设置的奖励账户里的余额应该增加了。&lt;/p&gt;
&lt;p&gt;然后就可以进行交易的准备。&lt;/p&gt;
&lt;p&gt;首先我们需要解锁账户，才能实施交易。之前在启动geth时添加的参数中，&lt;code&gt;--allow-insecure-unlock&lt;/code&gt;就是为了方便这一步的。&lt;/p&gt;
&lt;p&gt;解锁命令为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JS&#34; data-lang=&#34;JS&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;web3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;personal&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;unlockAccount&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;web3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;personal&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listAccounts&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;password&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后的数字代表解锁的时间，单位为秒。``代表你要解锁的账户的密码。&lt;/p&gt;
&lt;p&gt;虽然有另外一种解锁的方式，但是我没有成功。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JS&#34; data-lang=&#34;JS&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;personal&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;unlockAccount&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;accounts&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;password&amp;gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以交易啦。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JS&#34; data-lang=&#34;JS&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendTransaction&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;accounts&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;accounts&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;web3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toWei&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ether&amp;#34;&lt;/span&gt;)})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Console Game</title>
      <link>https://luosuu.github.io/post/console-game/</link>
      <pubDate>Thu, 05 Mar 2020 19:18:53 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/console-game/</guid>
      <description>&lt;p&gt;记录一下第一学期假期时跟着Github@guyaqi学长写的控制台小玩意&lt;/p&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;putFrame&lt;/span&gt;(WORD wAttributes,&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;changeFrame&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, WORD wAttributes);

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
	HANDLE handle;
	handle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO cursor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,FALSE };&lt;span style=&#34;color:#75715e&#34;&gt;//隐藏光标
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	SetConsoleCursorInfo(handle, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cursor);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a[][&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
	{
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1. White &amp;amp; Green&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2. Red &amp;amp; Grey&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3. White &amp;amp; Black&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4. White &amp;amp; Blue&amp;#34;&lt;/span&gt;
	};

	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;----------------------------------&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;            Colors&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
	putFrame(FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_BLUE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_INTENSITY, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a);
	putFrame(FOREGROUND_INTENSITY &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_BLUE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_RED,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
	putFrame(FOREGROUND_INTENSITY&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_BLUE,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
	putFrame(FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_BLUE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_BLUE,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;));

	SetConsoleTextAttribute(handle, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;       &amp;#34;&lt;/span&gt;);
	SetConsoleTextAttribute(handle, FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_BLUE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_INTENSITY);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a test text.&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#75715e&#34;&gt;//交互
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (true)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAsyncKeyState(VK_UP) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; position &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
		{
			position&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
			state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAsyncKeyState(VK_DOWN) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; position &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
		{
			position&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
			state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAsyncKeyState(VK_UP) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; position) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetAsyncKeyState(VK_DOWN) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8000&lt;/span&gt;))
		{
			state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (position &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) changeFrame(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_BLUE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_INTENSITY);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (position &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) changeFrame(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, FOREGROUND_INTENSITY &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_BLUE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_RED);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (position &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) changeFrame(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, FOREGROUND_INTENSITY
			&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_BLUE);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (position &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)changeFrame(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_BLUE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; BACKGROUND_BLUE);
	}
	system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;putFrame&lt;/span&gt;(WORD wAttributes, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a[])
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;        &amp;#34;&lt;/span&gt;);
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), wAttributes);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,a);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;changeFrame&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, WORD wAttributes)
{
	COORD coord;
	coord.X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
	coord.Y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
	{
		coord.Y &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
		printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;);
	}
	coord.X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
	coord.Y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY
		&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_RED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_GREEN &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; FOREGROUND_BLUE);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;gt;&amp;#34;&lt;/span&gt;);


	coord.X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
	coord.Y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), wAttributes);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a test text.&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>UWP Quickstart</title>
      <link>https://luosuu.github.io/post/uwp-quickstart/</link>
      <pubDate>Thu, 05 Mar 2020 18:55:54 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/uwp-quickstart/</guid>
      <description>&lt;p&gt;第二学期假期时去MSRA时速成了一下UWP&lt;/p&gt;
&lt;h2 id=&#34;uwp速成&#34;&gt;UWP速成&lt;/h2&gt;
&lt;p&gt;夏令营期间速成了一下微软家的前端工具UWP。&lt;/p&gt;
&lt;p&gt;推荐环境：Blend for Visual Studio 2019 / Visual Studio 2019&lt;/p&gt;
&lt;p&gt;需要安装Visual Studio的UWP开发组件。在&lt;code&gt;tools and extensions&lt;/code&gt;里面安装。&lt;/p&gt;
&lt;p&gt;如果你使用的是Visual Studio 2017，可能会出现无法使用实时preview功能，建议升级为2019版本。&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;p&gt;首先新建UWP项目。&lt;/p&gt;
&lt;p&gt;然后你会看到&lt;code&gt;App.xaml&lt;/code&gt;和&lt;code&gt;MainPage.xaml&lt;/code&gt;，前面的不用管。后面的就是我们的主页面。&lt;/p&gt;
&lt;p&gt;xaml文件类似于HTML文件，熟悉HTML的同学很快就能上手。&lt;/p&gt;
&lt;p&gt;关于常用的组件，可以去Windows store里面下载&lt;code&gt;xaml Controls Gallery&lt;/code&gt;。里面有几乎所有常用的组件及其基本代码，更重要的是它本身就是用UWP写的，所以里面的组件都有展示效果，很方便很强大，缺点就是不够详细。&lt;/p&gt;
&lt;p&gt;比较详细的可以查阅文档，微软的UWP文档写的相当好。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/uwp/&#34;&gt;UWP doucumentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在你可以看到&lt;code&gt;MainPage.xaml&lt;/code&gt;的内容了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xaml&#34; data-lang=&#34;xaml&#34;&gt;&amp;lt;Page
    x:Class=&amp;quot;Github_example.MainPage&amp;quot;
    xmlns=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;
    xmlns:local=&amp;quot;using:Github_example&amp;quot;
    xmlns:d=&amp;quot;http://schemas.microsoft.com/expression/blend/2008&amp;quot;
    xmlns:mc=&amp;quot;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;quot;
    mc:Ignorable=&amp;quot;d&amp;quot;
    Background=&amp;quot;{ThemeResource ApplicationPageBackgroundThemeBrush}&amp;quot;&amp;gt;

    &amp;lt;Grid&amp;gt;

    &amp;lt;/Grid&amp;gt;
&amp;lt;/Page&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;``中是页面的内容。&lt;/p&gt;
&lt;p&gt;``是一个组件，能按照几行几列分割页面。其基本的使用是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xaml&#34; data-lang=&#34;xaml&#34;&gt;&amp;lt;Grid&amp;gt;
    &amp;lt;Grid.RowDefinitions&amp;gt;
        &amp;lt;RowDefinition Height = &amp;quot;50&amp;quot; /&amp;gt;
        &amp;lt;RowDefinition Height = &amp;quot;*&amp;quot;/&amp;gt;
        &amp;lt;RowDefinition Height = &amp;quot;2*&amp;quot;/&amp;gt;
    &amp;lt;/Grid.RowDefinitions&amp;gt;

    &amp;lt;Grid.ColumnDefinitions&amp;gt;
        &amp;lt;ColumnDefinition Width=&amp;quot;50&amp;quot; /&amp;gt;
        &amp;lt;ColumnDefinition Width=&amp;quot;Auto&amp;quot; /&amp;gt;
        &amp;lt;ColumnDefinition /&amp;gt;
    &amp;lt;/Grid.ColumnDefinitions&amp;gt;

    &amp;lt;StackPanel Orientation=&amp;quot;Vertical&amp;quot; Grid.Row=&amp;quot;1&amp;quot;&amp;gt;
        &amp;lt;TextBlock Text=&amp;quot;Hello&amp;quot;/&amp;gt;
        &amp;lt;TextBlock Text=&amp;quot;world&amp;quot;/&amp;gt;
    &amp;lt;/StackPanel&amp;gt;

&amp;lt;/Grid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;*表示按比例分割区域，上面的代码就代表着第二行和第三行的比例是1：2&lt;/p&gt;
&lt;p&gt;想要在Grid中布置组件，只需要在``中声明组件，然后在组件的属性中加入如&lt;code&gt;Grid.Row = &amp;quot;1&amp;quot;&lt;/code&gt;表示组件在Grid中的位置。上面的代码就在第一行的位置上布置了一个组件StackPanel。&lt;/p&gt;
&lt;p&gt;StackPanel能按照一定的方向排列组件。排列的方向由属性&amp;quot;Orientation&amp;quot;决定。&lt;/p&gt;
&lt;h2 id=&#34;常用的结构&#34;&gt;常用的结构&lt;/h2&gt;
&lt;h3 id=&#34;uwp非常具有独特风格的navigationview框架&#34;&gt;UWP非常具有独特风格的NavigationView框架&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-xaml&#34; data-lang=&#34;xaml&#34;&gt;&amp;lt;Page
    x:Class=&amp;quot;Github_example.MainPage&amp;quot;
    xmlns=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;
    xmlns:local=&amp;quot;using:Github_example&amp;quot;
    xmlns:d=&amp;quot;http://schemas.microsoft.com/expression/blend/2008&amp;quot;
    xmlns:mc=&amp;quot;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;quot;
    mc:Ignorable=&amp;quot;d&amp;quot;
    Background=&amp;quot;{ThemeResource ApplicationPageBackgroundThemeBrush}&amp;quot;&amp;gt;


    &amp;lt;NavigationView x:Name=&amp;quot;nvSample&amp;quot;&amp;gt;
        &amp;lt;NavigationView.MenuItems&amp;gt;
            &amp;lt;NavigationViewItem Icon=&amp;quot;Play&amp;quot; Content=&amp;quot;Menu Item1&amp;quot; Tag=&amp;quot;SamplePage1&amp;quot; /&amp;gt;
            &amp;lt;NavigationViewItem Icon=&amp;quot;Save&amp;quot; Content=&amp;quot;Menu Item2&amp;quot; Tag=&amp;quot;SamplePage2&amp;quot; /&amp;gt;
            &amp;lt;NavigationViewItem Icon=&amp;quot;Refresh&amp;quot; Content=&amp;quot;Menu Item3&amp;quot; Tag=&amp;quot;SamplePage3&amp;quot; /&amp;gt;
            &amp;lt;NavigationViewItem Icon=&amp;quot;Download&amp;quot; Content=&amp;quot;Menu Item4&amp;quot; Tag=&amp;quot;SamplePage4&amp;quot; /&amp;gt;
        &amp;lt;/NavigationView.MenuItems&amp;gt;

        &amp;lt;Frame x:Name=&amp;quot;contentFrame&amp;quot;&amp;gt;
            &amp;lt;Grid&amp;gt;
            &amp;lt;/Grid&amp;gt;
        &amp;lt;/Frame&amp;gt;
    &amp;lt;/NavigationView&amp;gt;

&amp;lt;/Page&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;``中就是除了框架的内容页面。&lt;/p&gt;
&lt;p&gt;使用了NavigationView自然要进行页面跳转。页面跳转的实现部分要放在&lt;code&gt;MianPage.xaml.cs&lt;/code&gt;中实现。&lt;/p&gt;
&lt;p&gt;页面跳转有两种方法，一个是&lt;code&gt;ItemInvoked&lt;/code&gt;，另外一个是&lt;code&gt;SelectionChanged&lt;/code&gt;。前者只要发生NavigationView的item点击事件就会被检测到，后者只有当选择的item发生变化时才会发生。下面展示一个使用&lt;code&gt;ItemInvoked&lt;/code&gt;的页面跳转的实现。所以你需要新建&lt;code&gt;Blank page&lt;/code&gt;项目，修改.xaml.cs中的类的名称。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; NvSample_ItemInvoked(NavigationView sender, NavigationViewItemInvokedEventArgs args)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (args.IsSettingsInvoked == &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
            {
                contentFrame.Navigate(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(SettingsPage), args.RecommendedNavigationTransitionInfo);
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            {
                TextBlock ItemContent = args.InvokedItem &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TextBlock;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (ItemContent.Tag)
                {
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Recog_page&amp;#34;&lt;/span&gt;:
                        {
                            contentFrame.Navigate(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Recog_page));
                        }
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SP2&amp;#34;&lt;/span&gt;:
                        {
                            contentFrame.Navigate(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(SamplePage2));
                        }
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SP3&amp;#34;&lt;/span&gt;:
                        {
                            contentFrame.Navigate(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(SamplePage3));
                        }
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SP4&amp;#34;&lt;/span&gt;:
                        {
                            contentFrame.Navigate(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(SamplePage4));
                        }
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
                        {
                            contentFrame.Navigate(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(MainPage));
                        }
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
                }
            }
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述的实现通过识别item的不同tag属性来进行跳转。由于NavigationView自带的Setting不具备tag属性，所以就先只好判断&lt;code&gt;IsSettingInvoked&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;contentFrame.Navigate(typeof())&lt;/code&gt;进行页面跳转，识别的是.xaml.cs文件中的类的名称，而不是xaml文件里的name。&lt;/p&gt;
&lt;p&gt;xaml文件的地位并不高，只是方便我们搭建框架而已，实际上xaml文件完全可以不写，完全使用C#搭建框架，只是这样没有编辑xaml直观方便。&lt;/p&gt;
&lt;h2 id=&#34;在uwp中使用图片&#34;&gt;在UWP中使用图片&lt;/h2&gt;
&lt;p&gt;你可能需要使用到BitmapImage类，但是BitmapImage类默认不在UWP项目的引用列表里，所以需要手动添加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; windows.UI.Xaml.Media.Imaging;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;MianPage的命名空间&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，一般是项目名&lt;/span&gt;&amp;gt;.Views;&lt;span style=&#34;color:#75715e&#34;&gt;//有的时候不必要添加
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BitmapImage类使用Uri进行加载资源文件，UWP的资源文件默认都放在项目里的Assets文件夹里。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;BitmapImage picture = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BitmapImage();
picture.UriSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ms-appx:Assets/dog.jpg&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以把这个属性赋给一些图片，让他们重新加载资源图片。如果xaml文件里有一个Image组件，属性有&lt;code&gt;x:name = Sample&lt;/code&gt;，那么就可以在.xaml.cs文件里，使用&lt;code&gt;Sample.Source=picture&lt;/code&gt;来重新加载图片。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MSRA Summercamp</title>
      <link>https://luosuu.github.io/post/msra-summercamp/</link>
      <pubDate>Thu, 05 Mar 2020 18:55:03 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/msra-summercamp/</guid>
      <description>&lt;p&gt;微软学生夏令营记录&lt;/p&gt;
&lt;h2 id=&#34;微软文化改革&#34;&gt;微软文化改革&lt;/h2&gt;
&lt;h3 id=&#34;微软员工要从无所不知到无所不学&#34;&gt;微软员工要从“无所不知”到“无所不学”&lt;/h3&gt;
&lt;p&gt;工程师文化不应该是高冷的，不应该是一种自负的，而应该时刻保持谦虚，坦诚地给出自己的意见和看法，不断发现和学习别人的长处。我知道这和所谓的“极客精神”有所出入，但是我认为这是一种更好，更融洽的相处方式。&lt;/p&gt;
&lt;p&gt;微软曾经公司文化崇尚竞争，各部门之间互相竞争，甚至同一个部门的各个团队都要互相竞争，他们有严格的排名制度，并且根据这个排名分配奖金，甚至还有罚金。此时的微软，市值已经蒸发到了顶峰时期的一半，改革势在必行。&lt;/p&gt;
&lt;p&gt;纳德拉上任后推崇合作，对员工的评判变成了“自己的成就”，“帮助别人完成的成就”，“在别人帮助下完成的成就”。&lt;/p&gt;
&lt;p&gt;帮助别人，保持一种好奇心，不断虚心的学习和为他们提供帮助，就是每个人的最好的相处方式，这样才能成就更多。&lt;/p&gt;
&lt;p&gt;有一句名言是“文化能把战略当早餐吃”。纳德拉能够带领微软改革成功，曾坦言“文化改革是整个公司改革的大半”。&lt;/p&gt;
&lt;p&gt;顺便说一句纳德拉受采访时回答的问题，深得我心。&lt;/p&gt;
&lt;p&gt;组织领导要：&lt;strong&gt;Listen more, talk less, but be decisive when time comes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看重员工：&lt;strong&gt;Do they create clarity, do they create energy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;领导少说多听具有决断力，员工要“清晰而富有能量”。&lt;/p&gt;
&lt;h3 id=&#34;予力全球成就不凡&#34;&gt;予力全球，成就不凡&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;empower every person and every organization on the planet to achieve more.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这包含了微软的人文关怀精神。&lt;/p&gt;
&lt;p&gt;微软已经不是一家“软件公司”，而是一家“生产力平台公司”。这意味着微软的使命已经发生变化，让人们使用微软的技术去成就不凡已经是微软的目标。&lt;/p&gt;
&lt;p&gt;我们可以看到盲人也可以在微软成为工程师，达到令人尊敬的成就，并且仍在致力于用AI帮助盲人。&lt;/p&gt;
&lt;p&gt;微软提供了完整的学习资源平台和方便的工具，每一位开发者都可以构建属于他们的应用，使用AI和云服务去成就更多，实现更多，完成他们的创意和梦想。&lt;/p&gt;
&lt;h2 id=&#34;开源和geek精神&#34;&gt;开源和“Geek精神”&lt;/h2&gt;
&lt;p&gt;不要尝试去理解整个大的开源项目是如何运行起来的，即使是资深的软件工程师都很难短时间内搞清楚，做这样的尝试只会令你有挫败感。&lt;/p&gt;
&lt;p&gt;当我们谈到开源，总会有人去聊一些“极客精神”和一些传奇的故事。然而现在的开源已经变成一项工作，是每个顶级公司必须要做的事情。这意味着开源已经变得工业化，也就会变得有规范。&lt;/p&gt;
&lt;p&gt;另外，参与开源项目对个人的提升是巨大的，因为参与开源项目本身要求的素质就有很多，代码能力是肯定的，但还包含与别人交流的能力，迅速融入一个社区的能力，以及一定的创造意识和共享精神。&lt;/p&gt;
&lt;p&gt;开源是趋势，是发展方向，未来开源的市场会越来越大，机会也会越来越多。&lt;/p&gt;
&lt;p&gt;可以从一些简单的小bug入手，参与开源项目，很多小bug都是故意留下来希望能够吸引更多人能够参与的。&lt;/p&gt;
&lt;h2 id=&#34;创新的勇气和时机&#34;&gt;创新的勇气和时机&lt;/h2&gt;
&lt;p&gt;有勇气创新的人不缺乏创造力，抓住时机创新的人成就不凡。&lt;/p&gt;
&lt;p&gt;我曾经考虑一个东西的时候总是会优先考虑这个事情的可行性，无论是讨论一个流程的策划，还是讨论一个项目的开发。&lt;/p&gt;
&lt;p&gt;然而在这次微软夏令营的Hackathon中我体会到了这样做只能驻足在平庸之流，仅仅去考虑最终完成度的高低是限制人创造力和生产力的。&lt;/p&gt;
&lt;p&gt;最开始的时候我们选择了我们比较轻车熟路的路线，并急于立刻进行开发，希望能够在有限的时间中完成一个质量更好的demo。但是在随后的深入讨论中我发现，这不是我想做的，我们可以尝试去做一个更有趣更有价值的方向和idea。&lt;/p&gt;
&lt;p&gt;幸运的是我的队友和我见解相同，并且她有一个很好的故事。于是我们调整方向，这让我们更加富有热情。&lt;/p&gt;
&lt;p&gt;令我意外的是，当我调整了方向之后，我的创造力和生产力大大提升，并迅速的完成了框架的开发，我的队友的工作也很快有了进展。虽然我们最后没能拿到“BEST PROJECT”的荣誉，但是这次的比赛经历已经让我收获颇多。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Homebrew Install Scripts</title>
      <link>https://luosuu.github.io/post/install-homebrew-ustc-source/</link>
      <pubDate>Thu, 05 Mar 2020 17:22:17 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/install-homebrew-ustc-source/</guid>
      <description>&lt;p&gt;通过ustc源安装homebrew&lt;/p&gt;
&lt;h2 id=&#34;ruby-scripts&#34;&gt;Ruby Scripts&lt;/h2&gt;
&lt;p&gt;brew_install.rb&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/ruby&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This script installs to /usr/local only. To install elsewhere (which is&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# unsupported) you can untar https://github.com/Homebrew/brew/tarball/master&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# anywhere you like.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_PREFIX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze
&lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_REPOSITORY&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/Homebrew&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze
&lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_CACHE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/Library/Caches/Homebrew&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze
&lt;span style=&#34;color:#66d9ef&#34;&gt;BREW_REPO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://mirrors.ustc.edu.cn/brew.git&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze

&lt;span style=&#34;color:#75715e&#34;&gt;# TODO: bump version when new macOS is released&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;MACOS_LATEST_SUPPORTED&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.15&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze
&lt;span style=&#34;color:#75715e&#34;&gt;# TODO: bump version when new macOS is released&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;MACOS_OLDEST_SUPPORTED&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.13&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze

&lt;span style=&#34;color:#75715e&#34;&gt;# no analytics during installation&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HOMEBREW_NO_ANALYTICS_THIS_RUN&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HOMEBREW_NO_ANALYTICS_MESSAGE_OUTPUT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# get nicer global variables&lt;/span&gt;
require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;English&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Tty
  &lt;span style=&#34;color:#66d9ef&#34;&gt;module_function&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blue&lt;/span&gt;
    bold &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;red&lt;/span&gt;
    bold &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reset&lt;/span&gt;
    escape &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bold&lt;/span&gt;(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;)
    escape &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;code&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;underline&lt;/span&gt;
    escape &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4;39&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;(code)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;code&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;STDOUT&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tty?
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Array&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shell_s&lt;/span&gt;
    cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dup
    first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shift
    cp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;arg&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; arg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gsub &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unshift(first)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ohai&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args)
  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blue&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;==&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bold&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shell_s&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;warn&lt;/span&gt;(warning)
  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;red&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Warning&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;warning&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args)
  abort &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed during: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shell_s&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Kernel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sudo&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args)
  args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unshift(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-A&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SUDO_ASKPASS&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;nil?
  ohai &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/bin/sudo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args
  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/bin/sudo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getc&lt;/span&gt;
  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/stty raw -echo&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;STDIN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;respond_to?(&lt;span style=&#34;color:#e6db74&#34;&gt;:getbyte&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;STDIN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getbyte
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;STDIN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getc
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ensure&lt;/span&gt;
  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/stty -raw echo&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wait_for_user&lt;/span&gt;
  puts
  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Press RETURN to continue or any other key to abort&amp;#34;&lt;/span&gt;
  c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getc
  &lt;span style=&#34;color:#75715e&#34;&gt;# we test for \r and \n because some stuff does \r instead&lt;/span&gt;
  abort &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Comparable&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:parts&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(str)
    @parts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:to_i&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt;(other)
    parts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(other)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parts
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_s&lt;/span&gt;
    parts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;macos_version&lt;/span&gt;
  @macos_version &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;`/usr/bin/sw_vers -productVersion`&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/10\.\d+/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_install_command_line_tools?&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; macos_version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.13&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exist?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Developer/CommandLineTools/usr/bin/git&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exist?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Developer/CommandLineTools/usr/bin/git&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exist?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/include/iconv.h&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user_only_chmod?&lt;/span&gt;(path)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;directory?(path)

  mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stat(path)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mode &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# u = (mode &amp;gt;&amp;gt; 6) &amp;amp; 07&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# g = (mode &amp;gt;&amp;gt; 3) &amp;amp; 07&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# o = (mode &amp;gt;&amp;gt; 0) &amp;amp; 07&lt;/span&gt;
  mode &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0755&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chmod?&lt;/span&gt;(path)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exist?(path) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readable?(path) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writable?(path) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;executable?(path))
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chown?&lt;/span&gt;(path)
  &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;owned?(path)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chgrp?&lt;/span&gt;(path)
  &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grpowned?(path)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# USER isn&amp;#39;t always set so provide a fall back for the installer and subprocesses.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USER&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`id -un`&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp

&lt;span style=&#34;color:#75715e&#34;&gt;# Invalidate sudo timestamp before exiting (if it wasn&amp;#39;t active before).&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Kernel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/bin/sudo -n -v 2&amp;gt;/dev/null&amp;#34;&lt;/span&gt;
at_exit { &lt;span style=&#34;color:#66d9ef&#34;&gt;Kernel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/bin/sudo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-k&amp;#34;&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $CHILD_STATUS&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;success?

&lt;span style=&#34;color:#75715e&#34;&gt;# The block form of Dir.chdir fails later if Dir.CWD doesn&amp;#39;t exist which I&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# guess is fair enough. Also sudo prints a warning message for no good reason&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Dir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;####################################################################### script&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;RUBY_PLATFORM&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;downcase&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;)
  abort &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;-EOABORT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;To&lt;/span&gt; install &lt;span style=&#34;color:#66d9ef&#34;&gt;Linuxbrew&lt;/span&gt;, paste at a terminal &lt;span style=&#34;color:#e6db74&#34;&gt;prompt&lt;/span&gt;:
    sh &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;EOABORT&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; macos_version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.7&amp;#34;&lt;/span&gt;
  abort &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;-EOABORT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Your&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Mac&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OS&lt;/span&gt; X version is too old&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;See&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;#{Tty.underline}https://github.com/mistydemeo/tigerbrew#{Tty.reset}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;EOABORT&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; macos_version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.9&amp;#34;&lt;/span&gt;
  abort &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your OS X version is too old&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zero?
  abort &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Don&amp;#39;t run this as root!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`dsmemberutil checkmembership -U &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USER&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; -G admin`&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user is a member&amp;#34;&lt;/span&gt;)
  abort &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This script requires the user &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USER&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; to be an Administrator.&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;directory?(&lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_PREFIX&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;executable? &lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_PREFIX&lt;/span&gt;)
  abort &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;-EOABORT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;The&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Homebrew&lt;/span&gt; prefix, &lt;span style=&#34;color:#75715e&#34;&gt;#{HOMEBREW_PREFIX}, exists but is not searchable. If this is&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; intentional, please restore the default permissions &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; try running the
installer &lt;span style=&#34;color:#e6db74&#34;&gt;again&lt;/span&gt;:
    sudo chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;775&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#{HOMEBREW_PREFIX}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;EOABORT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# TODO: bump version when new macOS is released&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; macos_version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MACOS_LATEST_SUPPORTED&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; macos_version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MACOS_OLDEST_SUPPORTED&lt;/span&gt;
  who &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;We&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; macos_version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MACOS_LATEST_SUPPORTED&lt;/span&gt;
    what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pre-release version&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; macos_version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MACOS_OLDEST_SUPPORTED&lt;/span&gt;
    who &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; (and Apple)&amp;#34;&lt;/span&gt;
    what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;old version&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  ohai &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You are using macOS &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;macos_version&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#34;&lt;/span&gt;
  ohai &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;who&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; do not provide support for this &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;what&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#34;&lt;/span&gt;

  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;-EOS
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;This&lt;/span&gt; installation may &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; succeed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;After&lt;/span&gt; installation, you will encounter build failures with some formulae&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Please&lt;/span&gt; create pull requests instead of asking &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; help on &lt;span style=&#34;color:#66d9ef&#34;&gt;Homebrew&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s GitHub,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Discourse, Twitter or IRC. You are responsible for resolving any issues you
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;experience while you are running this #{what}.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  EOS
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ohai &amp;#34;This script will install:&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts &amp;#34;#{HOMEBREW_PREFIX}/bin/brew&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts &amp;#34;#{HOMEBREW_PREFIX}/share/doc/homebrew&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts &amp;#34;#{HOMEBREW_PREFIX}/share/man/man1/brew.1&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts &amp;#34;#{HOMEBREW_PREFIX}/share/zsh/site-functions/_brew&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts &amp;#34;#{HOMEBREW_PREFIX}/etc/bash_completion.d/brew&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts HOMEBREW_REPOSITORY.to_s
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Keep relatively in sync with
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# https://github.com/Homebrew/brew/blob/master/Library/Homebrew/keg.rb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;group_chmods = %w[bin etc include lib sbin share opt var
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                  Frameworks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                  etc/bash_completion.d lib/pkgconfig
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                  share/aclocal share/doc share/info share/locale share/man
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                  share/man/man1 share/man/man2 share/man/man3 share/man/man4
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                  share/man/man5 share/man/man6 share/man/man7 share/man/man8
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                  var/log var/homebrew var/homebrew/linked
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                  bin/brew]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;               .map { |d| File.join(HOMEBREW_PREFIX, d) }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;               .select { |d| chmod?(d) }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# zsh refuses to read from these directories if group writable
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;zsh_dirs = %w[share/zsh share/zsh/site-functions]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;           .map { |d| File.join(HOMEBREW_PREFIX, d) }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mkdirs = %w[bin etc include lib sbin share var opt
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            share/zsh share/zsh/site-functions
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            var/homebrew var/homebrew/linked
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            Cellar Caskroom Homebrew Frameworks]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         .map { |d| File.join(HOMEBREW_PREFIX, d) }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         .reject { |d| File.directory?(d) }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;user_chmods = zsh_dirs.select { |d| user_only_chmod?(d) }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;chmods = group_chmods + user_chmods
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;chowns = chmods.select { |d| chown?(d) }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;chgrps = chmods.select { |d| chgrp?(d) }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unless group_chmods.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ohai &amp;#34;The following existing directories will be made group writable:&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  puts(*group_chmods)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unless user_chmods.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ohai &amp;#34;The following existing directories will be made writable by user only:&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  puts(*user_chmods)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unless chowns.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ohai &amp;#34;The following existing directories will have their owner set to #{Tty.underline}#{ENV[&amp;#34;USER&amp;#34;]}#{Tty.reset}:&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  puts(*chowns)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unless chgrps.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ohai &amp;#34;The following existing directories will have their group set to #{Tty.underline}admin#{Tty.reset}:&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  puts(*chgrps)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unless mkdirs.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ohai &amp;#34;The following new directories will be created:&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  puts(*mkdirs)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;if should_install_command_line_tools?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ohai &amp;#34;The Xcode Command Line Tools will be installed.&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wait_for_user if STDIN.tty? &amp;amp;&amp;amp; !ENV[&amp;#34;CI&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;if File.directory? HOMEBREW_PREFIX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/bin/chmod&amp;#34;, &amp;#34;u+rwx&amp;#34;, *chmods unless chmods.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/bin/chmod&amp;#34;, &amp;#34;g+rwx&amp;#34;, *group_chmods unless group_chmods.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/bin/chmod&amp;#34;, &amp;#34;755&amp;#34;, *user_chmods unless user_chmods.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/usr/sbin/chown&amp;#34;, ENV[&amp;#34;USER&amp;#34;], *chowns unless chowns.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/usr/bin/chgrp&amp;#34;, &amp;#34;admin&amp;#34;, *chgrps unless chgrps.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;else
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/bin/mkdir&amp;#34;, &amp;#34;-p&amp;#34;, HOMEBREW_PREFIX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/usr/sbin/chown&amp;#34;, &amp;#34;root:wheel&amp;#34;, HOMEBREW_PREFIX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unless mkdirs.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/bin/mkdir&amp;#34;, &amp;#34;-p&amp;#34;, *mkdirs
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/bin/chmod&amp;#34;, &amp;#34;g+rwx&amp;#34;, *mkdirs
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/bin/chmod&amp;#34;, &amp;#34;755&amp;#34;, *zsh_dirs
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/usr/sbin/chown&amp;#34;, ENV[&amp;#34;USER&amp;#34;], *mkdirs
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/usr/bin/chgrp&amp;#34;, &amp;#34;admin&amp;#34;, *mkdirs
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;sudo &amp;#34;/bin/mkdir&amp;#34;, &amp;#34;-p&amp;#34;, HOMEBREW_CACHE unless File.directory? HOMEBREW_CACHE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;sudo &amp;#34;/bin/chmod&amp;#34;, &amp;#34;g+rwx&amp;#34;, HOMEBREW_CACHE if chmod? HOMEBREW_CACHE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;sudo &amp;#34;/usr/sbin/chown&amp;#34;, ENV[&amp;#34;USER&amp;#34;], HOMEBREW_CACHE if chown? HOMEBREW_CACHE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;sudo &amp;#34;/usr/bin/chgrp&amp;#34;, &amp;#34;admin&amp;#34;, HOMEBREW_CACHE if chgrp? HOMEBREW_CACHE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system &amp;#34;/usr/bin/touch&amp;#34;, &amp;#34;#{HOMEBREW_CACHE}/.cleaned&amp;#34; if File.directory? HOMEBREW_CACHE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;if should_install_command_line_tools? &amp;amp;&amp;amp; macos_version &amp;gt;= &amp;#34;10.13&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ohai &amp;#34;Searching online for the Command Line Tools&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # This temporary file prompts the &amp;#39;&lt;/span&gt;softwareupdate&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; utility to list the Command Line Tools
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  clt_placeholder = &amp;#34;/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/usr/bin/touch&amp;#34;, clt_placeholder
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  clt_label_command = &amp;#34;/usr/sbin/softwareupdate -l | &amp;#34; \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                      &amp;#34;grep -B 1 -E &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Command&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Line&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tools&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; | &amp;#34; \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                      &amp;#34;awk -F&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/^&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;\\&lt;span style=&#34;color:#f92672&#34;&gt;*/&lt;/span&gt; {print $2}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; | &amp;#34; \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                      &amp;#34;sed -e &amp;#39;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;/^&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Label&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; -e &amp;#39;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;/^&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*//&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; | &amp;#34; \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                      &amp;#34;sort -V | &amp;#34; \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                      &amp;#34;tail -n1&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  clt_label = `#{clt_label_command}`.chomp
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  unless clt_label.empty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ohai &amp;#34;Installing #{clt_label}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    sudo &amp;#34;/usr/sbin/softwareupdate&amp;#34;, &amp;#34;-i&amp;#34;, clt_label
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    sudo &amp;#34;/bin/rm&amp;#34;, &amp;#34;-f&amp;#34;, clt_placeholder
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    sudo &amp;#34;/usr/bin/xcode-select&amp;#34;, &amp;#34;--switch&amp;#34;, &amp;#34;/Library/Developer/CommandLineTools&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Headless install may have failed, so fallback to original &amp;#39;&lt;/span&gt;xcode&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;select&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; method
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;if should_install_command_line_tools? &amp;amp;&amp;amp; STDIN.tty?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ohai &amp;#34;Installing the Command Line Tools (expect a GUI popup):&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/usr/bin/xcode-select&amp;#34;, &amp;#34;--install&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  puts &amp;#34;Press any key when the installation has completed.&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  getc
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  sudo &amp;#34;/usr/bin/xcode-select&amp;#34;, &amp;#34;--switch&amp;#34;, &amp;#34;/Library/Developer/CommandLineTools&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abort &amp;lt;&amp;lt;-EOABORT if `/usr/bin/xcrun clang 2&amp;gt;&amp;amp;1` =~ /license/ &amp;amp;&amp;amp; !$CHILD_STATUS.success?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;You have not agreed to the Xcode license.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Before running the installer again please agree to the license by opening
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Xcode.app or running:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    sudo xcodebuild -license
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOABORT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ohai &amp;#34;Downloading and installing Homebrew...&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Dir.chdir HOMEBREW_REPOSITORY do
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # we do it in four steps to avoid merge errors when reinstalling
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  system &amp;#34;git&amp;#34;, &amp;#34;init&amp;#34;, &amp;#34;-q&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # &amp;#34;git remote add&amp;#34; will fail if the remote is defined in the global config
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  system &amp;#34;git&amp;#34;, &amp;#34;config&amp;#34;, &amp;#34;remote.origin.url&amp;#34;, BREW_REPO
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  system &amp;#34;git&amp;#34;, &amp;#34;config&amp;#34;, &amp;#34;remote.origin.fetch&amp;#34;, &amp;#34;+refs/heads/*:refs/remotes/origin/*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # ensure we don&amp;#39;&lt;/span&gt;t munge line endings on checkout
  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;core.autocrlf&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;

  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fetch&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;origin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master:refs/remotes/origin/master&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--tags&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--force&amp;#34;&lt;/span&gt;

  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reset&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--hard&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;origin/master&amp;#34;&lt;/span&gt;

  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ln&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-sf&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_REPOSITORY&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/brew&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_PREFIX&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/brew&amp;#34;&lt;/span&gt;

  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_PREFIX&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/brew&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--force&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_PREFIX&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin is not in your PATH.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_PREFIX&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin&amp;#34;&lt;/span&gt;

ohai &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Installation successful!&amp;#34;&lt;/span&gt;
puts

&lt;span style=&#34;color:#75715e&#34;&gt;# Use the shell&amp;#39;s audible bell.&lt;/span&gt;
print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Use an extra newline and bold to avoid this being missed.&lt;/span&gt;
ohai &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Homebrew has enabled anonymous aggregate formulae and cask analytics.&amp;#34;&lt;/span&gt;
puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;-EOS
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#{Tty.bold}Read the analytics documentation (and how to opt-out) here:&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#{Tty.underline}https://docs.brew.sh/Analytics#{Tty.reset}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;EOS&lt;/span&gt;

ohai &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Homebrew is run entirely by unpaid volunteers. Please consider donating:&amp;#34;&lt;/span&gt;
puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;-EOS
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#{Tty.underline}https://github.com/Homebrew/brew#donations#{Tty.reset}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;EOS&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;Dir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir &lt;span style=&#34;color:#66d9ef&#34;&gt;HOMEBREW_REPOSITORY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--replace-all&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;homebrew.analyticsmessage&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
  system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--replace-all&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;homebrew.caskanalyticsmessage&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

ohai &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Next steps:&amp;#34;&lt;/span&gt;
puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;- Run `brew help` to get started&amp;#34;&lt;/span&gt;
puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;- Further documentation: &amp;#34;&lt;/span&gt;
puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;    &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;underline&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https://docs.brew.sh&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;set-homebrew-core&#34;&gt;Set Homebrew Core&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;brew --repo&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/Library/Taps/homebrew/homebrew-core&amp;#34;&lt;/span&gt;
git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;set-homebrew-bottles&#34;&gt;Set Homebrew Bottles&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;set-homebrew-cask&#34;&gt;Set Homebrew Cask&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;brew --repo&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;/Library/Taps/homebrew/homebrew-cask
git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, &lt;code&gt;brew update&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://luosuu.github.io/post/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luosuu.github.io/post/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings&lt;/h2&gt;
&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1 id=&#34;h1&#34;&gt;H1&lt;/h1&gt;
&lt;h2 id=&#34;h2&#34;&gt;H2&lt;/h2&gt;
&lt;h3 id=&#34;h3&#34;&gt;H3&lt;/h3&gt;
&lt;h4 id=&#34;h4&#34;&gt;H4&lt;/h4&gt;
&lt;h5 id=&#34;h5&#34;&gt;H5&lt;/h5&gt;
&lt;h6 id=&#34;h6&#34;&gt;H6&lt;/h6&gt;
&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h2&gt;
&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h4 id=&#34;blockquote-without-attribution&#34;&gt;Blockquote without attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;blockquote-with-attribution&#34;&gt;Blockquote with attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;/p&gt;
— &lt;cite&gt;Rob Pike&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tables&#34;&gt;Tables&lt;/h2&gt;
&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;inline-markdown-within-tables&#34;&gt;Inline Markdown within tables&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Inline   &lt;/th&gt;
&lt;th&gt;Markdown   &lt;/th&gt;
&lt;th&gt;In   &lt;/th&gt;
&lt;th&gt;Table&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;del&gt;strikethrough&lt;/del&gt;   &lt;/td&gt;
&lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;code-blocks&#34;&gt;Code Blocks&lt;/h2&gt;
&lt;h4 id=&#34;code-block-with-backticks&#34;&gt;Code block with backticks&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;code-block-indented-with-four-spaces&#34;&gt;Code block indented with four spaces&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;code-block-with-hugos-internal-highlight-shortcode&#34;&gt;Code block with Hugo&amp;rsquo;s internal highlight shortcode&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;Example HTML5 Document&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;Test&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;list-types&#34;&gt;List Types&lt;/h2&gt;
&lt;h4 id=&#34;ordered-list&#34;&gt;Ordered List&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unordered-list&#34;&gt;Unordered List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nested-list&#34;&gt;Nested list&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Item&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;First Sub-item&lt;/li&gt;
&lt;li&gt;Second Sub-item&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;other-elements--abbr-sub-sup-kbd-mark&#34;&gt;Other Elements — abbr, sub, sup, kbd, mark&lt;/h2&gt;
&lt;p&gt;&lt;abbr title=&#34;Graphics Interchange Format&#34;&gt;GIF&lt;/abbr&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;/sup&gt; + Y&lt;sup&gt;n&lt;/sup&gt; = Z&lt;sup&gt;n&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt;&lt;/kbd&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;/mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&#34;&gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://luosuu.github.io/post/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luosuu.github.io/post/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de
pectora summo.&lt;/p&gt;
&lt;p&gt;Redit teque digerit hominumque toris verebor lumina non cervice
subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc
caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis
lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exierant elisi ambit vivere dedere&lt;/li&gt;
&lt;li&gt;Duce pollice&lt;/li&gt;
&lt;li&gt;Eris modo&lt;/li&gt;
&lt;li&gt;Spargitque ferrea quos palude&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus
silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria
tractus malis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comas hunc haec pietate fetum procerum dixit&lt;/li&gt;
&lt;li&gt;Post torum vates letum Tiresia&lt;/li&gt;
&lt;li&gt;Flumen querellas&lt;/li&gt;
&lt;li&gt;Arcanaque montibus omnes&lt;/li&gt;
&lt;li&gt;Quidem et&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;vagus-elidunt&#34;&gt;Vagus elidunt&lt;/h1&gt;
&lt;p&gt;&lt;svg class=&#34;canon&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; overflow=&#34;visible&#34; viewBox=&#34;0 0 496 373&#34; height=&#34;373&#34; width=&#34;496&#34;&gt;&lt;g fill=&#34;none&#34;&gt;&lt;path stroke=&#34;#000&#34; stroke-width=&#34;.75&#34; d=&#34;M.599 372.348L495.263 1.206M.312.633l494.95 370.853M.312 372.633L247.643.92M248.502.92l246.76 370.566M330.828 123.869V1.134M330.396 1.134L165.104 124.515&#34;&gt;&lt;/path&gt;&lt;path stroke=&#34;#ED1C24&#34; stroke-width=&#34;.75&#34; d=&#34;M275.73 41.616h166.224v249.05H275.73zM54.478 41.616h166.225v249.052H54.478z&#34;&gt;&lt;/path&gt;&lt;path stroke=&#34;#000&#34; stroke-width=&#34;.75&#34; d=&#34;M.479.375h495v372h-495zM247.979.875v372&#34;&gt;&lt;/path&gt;&lt;ellipse cx=&#34;498.729&#34; cy=&#34;177.625&#34; rx=&#34;.75&#34; ry=&#34;1.25&#34;&gt;&lt;/ellipse&gt;&lt;ellipse cx=&#34;247.229&#34; cy=&#34;377.375&#34; rx=&#34;.75&#34; ry=&#34;1.25&#34;&gt;&lt;/ellipse&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon&#34;&gt;The Van de Graaf Canon&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mane-refeci-capiebant-unda-mulcebat&#34;&gt;Mane refeci capiebant unda mulcebat&lt;/h2&gt;
&lt;p&gt;Victa caducifer, malo vulnere contra
dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere
furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong&gt;Faces illo pepulere&lt;/strong&gt; tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p&gt;
&lt;p&gt;Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli
Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare
Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert
ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae
vulnus haerentia iuste et exercebat, sui et.&lt;/p&gt;
&lt;p&gt;Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong&gt;mitis temploque&lt;/strong&gt; vocatus, inque alis, &lt;em&gt;oculos nomen&lt;/em&gt; non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem
Propoetides &lt;strong&gt;parte&lt;/strong&gt;.&lt;/p&gt;

&lt;style&gt;
.canon { background: white; width: 100%; height: auto;}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://luosuu.github.io/post/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luosuu.github.io/post/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/functions/emojify/&#34;&gt;&lt;code&gt;emojify&lt;/code&gt;&lt;/a&gt; function can be called directly in templates or &lt;a href=&#34;https://gohugo.io/templates/shortcode-templates/#inline-shortcodes&#34;&gt;Inline Shortcodes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable emoji globally, set &lt;code&gt;enableEmoji&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your site’s &lt;a href=&#34;https://gohugo.io/getting-started/configuration/&#34;&gt;configuration&lt;/a&gt; and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙈&lt;/span&gt; &lt;code&gt;:see_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙉&lt;/span&gt; &lt;code&gt;:hear_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙊&lt;/span&gt; &lt;code&gt;:speak_no_evil:&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.emoji-cheat-sheet.com/&#34;&gt;Emoji cheat sheet&lt;/a&gt; is a useful reference for emoji shorthand codes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;.emoji {
font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;style&gt;
.emojify {
	font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols;
	font-size: 2rem;
	vertical-align: middle;
}
@media screen and (max-width:650px) {
    .nowrap {
	display: block;
	margin: 25px 0;
}
}
&lt;/style&gt;</description>
    </item>
    
  </channel>
</rss>