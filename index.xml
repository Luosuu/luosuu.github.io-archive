<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luosuu的小站</title>
    <link>https://example.com/</link>
    <description>Recent content on Luosuu的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; Copyright 2019 Luosuu</copyright>
    <lastBuildDate>Mon, 11 Nov 2019 19:07:48 +0800</lastBuildDate>
    
	<atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overview of Computer Science</title>
      <link>https://example.com/posts/overview-of-computer-science/</link>
      <pubDate>Mon, 11 Nov 2019 19:07:48 +0800</pubDate>
      
      <guid>https://example.com/posts/overview-of-computer-science/</guid>
      <description>有的同学表示对计算机有什么方向比较迷茫。应一些小伙伴要求，我就班门弄斧得给大家稍微介绍和总结一下。
专业计算机科研领域榜单-CSRankings 首先你需要查看一个计算机学科排名的榜单，叫做CSRankings。这个榜单较为全面的展示了计算机学科的各个方向和排名。
虽然CSRankings有很多大学的信息并不完全，也因此被诟病，但是CSRankings是一个专门给大学的计算机学科排名的榜单。而且CSRankings的考量因素并不包括其他榜单考虑的很多较为难以量化和主观的因素，只考虑从一定角度来说，CSRankings做到了完全靠数据说话，完全客观。
感兴趣的同学可以看看电子科技大学在计算机领域的综合排名和各个细分方向排名是多少。
左边就是计算机的各个领域和细分方向了。
同学们就可以看看哪个方向你看上去比较感兴趣，然后 Google Scholar(谷歌学术)或者wiki(维基百科) 搜索一下，最好不要用中文搜索。因为在科研领域中，中文是没有地位的，资料非常不完善并且可能搜出来的东西完全是错的或者是歧义。
这里稍微歪下，稍微介绍下Google Scholar，它是谷歌的一个学术搜索引擎，也是最常用的学术资料搜索引擎，无论是搜索论文还是搜索机构，大学，教授都很方便，电子科技大学现在校园网已经可以不用翻墙就可以访问谷歌学术了。
计算机工程 细心的同学会注意到“计算机科学与技术”专业代表了两个方向，即“科学”与“技术”。
那么我们大概了解了“科学”的方向都有了什么之后，就该了解一下工程界的计算机大概的方向了，也就是“技术”的部分。
前端 我们知道构建一个app一般需要一个美观的界面，那么构建界面和UI的就是前端。
前端包括一些Web上的技术，也就是“写网页”。主要需要学习的是一些HTML，CSS，Javascript等等，还需要学习一些Javascript的框架，如React，Vue等。
关于Web的前端，w3cschool是个很好的学习资源网站。
还包括写一些软件的界面，主流的有Qt，Electron，微软家的UWP等等。
开发移动端的话就要学会一些安卓/iOS的开发技巧了，安卓用Java的比较多，iOS主要是Objective-C和Swift。
后端 app只有界面不行，还得有功能，功能就需要有服务器和数据库等等的支持，负责这一部分的统称为后端。
可能要学的就是一些服务器和数据库相关的，服务器的话一般都用的Linux系统，所以一定要学会Linux的基本使用方法。
数据库类型就很多了，如MySQl，而且学校会开设数据库方面的专业课。
可能还需要学习一些算法知识（其实算法知识或多或少各方面都需要一些）。
但其实后端包含的面太广了，这里只是说了下典型。
算法比赛有ACM-ICPC和CCPC。详情可问小灰晖，同时第0次沙龙也有ACM-ICPC的入门介绍。
测试 软件写出来直接运行可能会有bug，如果直接发布可能会有严重的后果，负责写程序对软件进行各项检查的就是测试。
安全 当然软件也需要专业的安全保障，对软件进行安全测试就是安全部门的工作了，传统的安全防护有对软件进行逆向工程（俗称“破解”）方面的保护，最近比较火的是网络安全，阻拦网络上的各种恶意攻击和病毒。
安全方面的工作涉及的知识覆盖密码学，web安全，二进制安全等等。
安全方面有知名的竞赛，其中一种比较火的就是CTF比赛。感兴趣的可以去了解一下。同时现在有全国大学生信息安全竞赛。
架构 当然也会有一些人是负责总体设计的，他们一般被叫做架构师。
架构师需要深厚丰富的软件开发经验，可以说是软件的设计师。
What&amp;rsquo;s more 实际上构建一个app可能会很复杂，上面的分法是很粗糙的，不同的软件公司和不同的软件都会有不同的开发团队组成。
有些比较赶新潮的公司就会有云技术，AI，大数据等部门。
这上面是说构建一个app，当然也存在构建一些所谓“基础设施”的，比如操作系统。
UESTC有什么方向 遗憾的是，我们学校计算机科学并没能实现所有方向全覆盖，在我个人看来甚至瘸腿。所以了解我们学校有什么方向就很关键了，因为如果你要本科从事科研相关活动的话就只能从他们中选了。
先来看一下我们学校计算机学院有什么科研团队。
细心的同学会发现你电计算机学院大部分教授都是做AI的，如果你在CSRankings上看过电子科大的各项排名，会发现我们学校计算机视觉（Computer Vision）方向排名非常突出，而计算机视觉是人工智能细分方向之一。
几乎所有科研团队都做CV，也造就了你电CV强校的事实，但也让你电计算机学科建设略显单一。不过我们也存在做云计算，网络安全，传统算法，操作系统等方向的实验室。
实际上最后最重要的是找哪个老师，这一点无论你是不是想从事计算机方向的科研都是一样的，所以要到电子科大教师信息平台去了解。
当然如果你想了解下这个老师最近在做什么方向的研究，或者看看他实力如何，是不是高产，你就可以用到上面我提到的Google Scholar了，直接搜这个老师，他的学术活动就一目了然了。
计算机学院的专业 虽然我认为在电子科技大学，你在哪个专业并不特别影响你真正从事的方向，我认为这是电子科大非常好的一个地方，不过还是有很大的必要了解一下我们学校的专业设置和专业课程。
专业的课程设置要看《电子科技大学学生培养方案》，你们领了书的话应该有，是一大本很厚的书，找到自己学院然后看课程设置就是了。
如果还没拿到书可以到各个学院官网下载历年的培养计划。虽然每年培养计划都会有一点点改动。</description>
    </item>
    
    <item>
      <title>计算机的数值表示和计算</title>
      <link>https://example.com/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Mon, 11 Nov 2019 19:06:16 +0800</pubDate>
      
      <guid>https://example.com/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%AE%A1%E7%AE%97/</guid>
      <description>简单记录一下在计算机中如何表示数值与简单运算的。
进制转换 我们都知道计算机底层数值都是二进制的（由高低电平表示）。而我们生活中常用十进制，同时一些场合下也会用16进制。因此首先我们需要知道进制之间如何转换。
二进制转十六进制 二进制数以小数点为界，整数部分从小数点从左到右数，每4位分为一组，不足四位的时候在左端补0；小数部分从小数点从右往左数，每四位为一组，不足四位则在右端补0。然后每组按照二进制数与十六进制数对应关系转换。因为2的四次方为16，所以十六进制的每单个数都可以用四位二进制数表示出来。
十六进制转二进制 直接每位十六进制数都对应转换为四位二进制数即可。
二进制转十进制 $$(101.01)_2=1*2^2+0*2^1+1*2^0+0*2^-1+1*2^-2$$
十进制转二进制 十进制整数 十进制数不断除二，记录下每一次的余数，直到商为0。先得到的余数是二进制中的低位，后得到的是二进制整数中的高位。
十进制小数 小数位不断乘二，记录下每一次结果的整数位（当然只有0或1），直到小数位为0。先得到的整数位是二进制中的高位，后得到的整数位是二进制中的低位。
$$ 0.3125*2=0.625 0.625*2=1.25
0.25*2=0.5
0.5*2=1 $$
因此记录下来的二进制数为0.0101。即
$$0.3125 = (0.0101)_2$$
当然存在无法达到小数位为0的情况。视精度进行取舍，假如要求五位精度，求到第六位看第六位是0还是1，如果是0直接舍去，如果是1则在第五位进位。
补码制表示二进制数 上面我们讨论的二进制数都是无符号数，也就是无法用来表示这个数的正负。容易得知无符号数的表示范围是
$$[0,2^n-1]$$
我们思考一种简单的标志正负的方式，如果用n位来表示一个数，那么我们用最高位来标志这个数的正负，一般最高位为0代表正数，最高位为1代表负数。此时最高位我们称为符号位,剩余的n-1位称为数值位。带有符号的数我们称之为符号数。
考虑此时的n位二进制数的表示范围，以四位为例，对正数而言最大为0111，负数的表示范围为1111（-8）到1001（-1），此时0有1000和0000两种表示方法。也就是表示范围为
$$[-2^{n-1} , 2^{n-1}-1]$$
但是这样做会增加运算逻辑的复杂程度，因为加法器要先检查操作，然后再检查二者的符号：符号相同则将二者数值位相加然后赋给结果相同的符号位；如果符号不同还需要比较二者数值部分的大小，用较大的减去较小的，然后赋给结果较大的操作数的符号。
因此我们引进补码制来表示符号数。实际中的计算机符号数都是用补码制表示的。所以以后符号数就等同于补码制二进制数。
补码运算 我们先来了解一下补码：一个n位二进制数D的补码为
$$2^n-D_2$$
求补码的运算我们称之为补码运算。
补码运算可以变形
$$ 2^n-D
=(2^n-1-D)+1 $$
而$2^n-1-D$实际就是n位全1二进制数减去D，相当于对D取反。也就是说求D的补码的过程实际可以变成求D的补码然后再加一。这个运算过程对计算机硬件来说比减法容易得多。
补码制表示规则和性质 在补码制下同样用最高位表示符号，且0为正，1为负。
十进制数3的四位补码制二进制数同样为0011，而补码制下的负数为正数的补码。也就是-3表示为
$$1100_2+1=1101_2$$
如果你对补码制下的负数再进行补码运算，会得到该数的相反数，也就是变回正数。
$$0010_2+1=0011_2$$
这使得在补码制下正数与负数的相互转换非常方便，一对相反数互为对方的补码。
考虑n位补码制二进制数的表示范围，以4位为例：
正数最大为0111
负数可以从 1000（-8）～1111（-1）注意和非补码制的区别
0为0000，且0的补码仍为0000。
也就是
$$[-2^{n-1},2^{n-1}-1]$$
补码制下的拓展 对于无符号数，由于没有符号，从4位二进制数拓展到8位只需要在左端加四个0。称这种拓展方式位零拓展
对于符号数，我们需要考虑它的符号，拓展的规则是直接按照它的符号位进行拓展，也就是1101拓展到8位就表示为了11111101。
我们可以求一下拓展前后的补码验证一下，前者的补码为0011，也就是3，后者为00000011，也是3。
对符号数的位数拓展方式我们称为符号拓展
运算 加减 补码制的提出是为了简化运算。在补码制下运算不需要考虑符号位，符号位直接参与运算即可。并且如果操作为减法，那么就对后面的操作数求补码然后按加法运算即可。而且如果最高位产生了进位直接舍去最高位进位即可。
$$ 1110+1010=1000 $$</description>
    </item>
    
    <item>
      <title>Foreword</title>
      <link>https://example.com/posts/foreword/</link>
      <pubDate>Mon, 11 Nov 2019 18:18:13 +0800</pubDate>
      
      <guid>https://example.com/posts/foreword/</guid>
      <description>写在前面 本来无心写博客的，大部分笔记都放在了Github的repo里存着，结果发现自己也懒得打开repo复习，而且写的东西愈来愈多，索性建个简单的博客记录一下自己的笔记。甚为简陋请多包含，打算在第三学期读完SICP，如果我没有经常更新，欢迎发邮件到ZhLuosuu@outlook.com捶打我。最后希望大家能有所收获。</description>
    </item>
    
  </channel>
</rss>