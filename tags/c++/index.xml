<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on 洛舒luosuu的小站</title>
    <link>https://luosuu.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on 洛舒luosuu的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2020</copyright>
    <lastBuildDate>Sat, 08 Aug 2020 22:49:34 +0800</lastBuildDate>
    
	<atom:link href="https://luosuu.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AtABC173D-环上的贪心</title>
      <link>https://luosuu.github.io/post/atabc173d/</link>
      <pubDate>Sat, 08 Aug 2020 22:49:34 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/atabc173d/</guid>
      <description>&lt;p&gt;题面：https://atcoder.jp/contests/abc173/tasks/abc173_d&lt;/p&gt;
&lt;p&gt;为了让每个值最大效用化，我们肯定是从大到小的插入，所以首先我们需要对输入的友好值序列排序。&lt;/p&gt;
&lt;p&gt;在插入值的过程中，为了让某个较大的值物尽其用，肯定是在它的顺时针方向旁边插一个，逆时针方向插一个，由于新插入的值肯定小于等于它，所以每个插入的值最多被感受两次友好值。事实上，除了第一个插入的数，都可以被感受两次达到物尽其用。都可以顺时针方向邻接插一个，逆时针方向邻接插一个。&lt;/p&gt;
&lt;p&gt;对于长度为n的友好值序列，会插值n次，也就是感受值序列也是长度为n。&lt;/p&gt;
&lt;p&gt;对于友好值序列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5 4 3 2 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它的感受值序列为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 5 4 4 3 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么我们只需要特殊处理第1个和第2个感受值，剩下的在n长度范围内将友好值第二高开始都计算两次，直到计算总次数达到n（包含特殊处理的第一次和第二次）。&lt;/p&gt;
&lt;p&gt;以下是C++代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;algorithm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; A[N];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; A[i];
    }
    sort(A,A&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;N);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A[N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; number&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;N ; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; ) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(number&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;N) {
            res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; A[i];
            number&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; A[i];
            number&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AtABC173C-状态压缩</title>
      <link>https://luosuu.github.io/post/atabc173c/</link>
      <pubDate>Sat, 08 Aug 2020 20:52:39 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/atabc173c/</guid>
      <description>&lt;p&gt;题面：https://atcoder.jp/contests/abc173/tasks/abc173_c&lt;/p&gt;
&lt;p&gt;用题解的方式来理解，对于每一行是否被涂成红色，可以用一个二进制数来表示，假如有三行，以下可以做示例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;No,No,No&lt;/code&gt;-&lt;code&gt;0,0,0&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Yes,No,No&lt;/code&gt;-&lt;code&gt;0,0,1&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;No,Yes,No&lt;/code&gt;-&lt;code&gt;0,1,0&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Yes,Yes,No&lt;/code&gt;-&lt;code&gt;0,1,1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;虽然看起来是位置反过来了，其实是说第一行被涂成红色了，那二进制数的第一位就是1。&lt;/p&gt;
&lt;p&gt;我们就可以枚举所有行和列的状态，对于三行四列来说，行有$2^3$个状态（0-7），列有$2^4$个状态（0-15），共有$2^3 \cdot 2^4=2^{3+4}$个状态。&lt;/p&gt;
&lt;p&gt;对于每一个状态，我们可以检查黑色区域的数量，对于第i行第j列的区域，我们可以检查这个区域是否被涂成红色的行或列覆盖，与它本身是不是黑色。&lt;/p&gt;
&lt;p&gt;检查某个区域是不是被涂成红色的行或列覆盖的方法，就是通过将代表行状态的二进制数，右移i位并与1做与运算，判断结果是不是为0，如果是0，说明没有被覆盖。&lt;/p&gt;
&lt;p&gt;这是因为右移i位后，第i位就变成了第1位，与1做与运算，如果原本第i位是1（该行被涂成红色），结果就会是1，否则就是0。列同理。&lt;/p&gt;
&lt;p&gt;C++代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H,W,K;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; K;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; map[H][W];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,map[i]);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; solutions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; H) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; W) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; black &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;l) {
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( ( (i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;k)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;((j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;l)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;map[k][l]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; ){
                        black&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
                    }
                }
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(black&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;K){
                solutions&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            }
        }
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; solutions;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>STsheet</title>
      <link>https://luosuu.github.io/post/stsheet/</link>
      <pubDate>Sat, 08 Aug 2020 14:34:53 +0800</pubDate>
      
      <guid>https://luosuu.github.io/post/stsheet/</guid>
      <description>&lt;p&gt;《浅谈ST表》完整请参考：https://www.luogu.com.cn/blog/zhouziheng666/qian-tan-st-biao&lt;/p&gt;
&lt;p&gt;核心要素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查询操作可以重叠，如max操作&lt;code&gt;max(a,b,c)=max(max(a,b),max(b,c))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;采用倍增的方法构建，如果用$f(i,j)$代表从第i个数开始，共$2^j$个数的最大值，那么就有：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$
f(i,j)=max(f(i,j-1),f(i+2^{j-1},j-1))
$$&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;自然，$f(i,0)=a[i]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于查询的时候，查询的长度可能是小于等于N的任何一个整数，设该查询的长度是&lt;code&gt;len&lt;/code&gt;，查询的数组的第一个数是整个数组的第&lt;code&gt;r&lt;/code&gt;个数。我们可以用$max[r,r+len]$来代表被查询的数组的最大值，以上面的函数的定义，可以用
$$
f(r,log_{2}(len))
$$
来表示。在输入数组总长度N后，我们需要对1到N的所有数求对数，提前存储好所有可能要用的&lt;code&gt;log(len)&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于某个从第&lt;code&gt;r&lt;/code&gt;个数开始的被查询的长度为&lt;code&gt;len&lt;/code&gt;数组，$f(r,log_{2}(len))$的实际来源为&lt;/p&gt;
&lt;p&gt;$$f(r,1)=max(f(r,1-1),f(r+2^{1-1},1-1))$$
$$f(r,2)=max(f(r,2-1),f(r+2^{2-1},2-1)) $$
$$f(r,3)=max(f(r,3-1),f(r+2^{3-1},3-1)) $$
$$&amp;hellip;$$
$$f(,log_{2}len)=max(f(r,log_{2}len-1),f(r+2^{log_{2}len-1},log_{2}len-1))$$&lt;/p&gt;
&lt;p&gt;在获取数组长度和数组内容后，实际上是用所有的$f(i,0)$获得了所有的$f(i,1)$，然后再用$f(i,1)$得到所有的$f(i,2)$（这个过程要保证$i+2^j$不超过N，否则会越界），一直到获得$f(0,log_{2}N)$。这样查询时，对于任意一个$f(r,log_{2}len)$都能立刻查询到，查询的复杂度为$O(1)$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果查询的数组长&lt;code&gt;len&lt;/code&gt;，$[log_{2}len]$代表&lt;code&gt;len&lt;/code&gt;对2取对数的向下取整，那么一次这种函数的构建最多能包含$2^{[log_{2}len]}$个数，如果&lt;code&gt;len&lt;/code&gt;不是2的倍数，那么就会有数不会被包括进去，所以实际上为了求该数组的最大值，是从左端和右边分别构建一个函数（$2^{[log_{2}len]}$肯定大于$len/2$），取这两个函数的最大值:
$$
max[r,r+len]=max(f(r,log(len)), f(r-log(len)+1,log(len)))
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于任何可以重叠的查询操作，都可以使用ST表这种方法，无非是从$f(i,0)$开始向上构建时采用的方法不同。但构建逻辑和数据结构是一样的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>